import { camelCase } from "change-case";
import dedent from "dedent";
import fs from "fs-extra";
import path from "node:path";
import { format } from "prettier";

const referencePackages = [
  "@account-kit/core",
  "@account-kit/infra",
  "@account-kit/react",
  "@account-kit/signer",
  "@account-kit/smart-contracts",
  "@aa-sdk/core",
  "@aa-sdk/ethers",
];

const generateItems = (
  items: string[],
  referencePath: string,
  location: "functions" | "hooks" | "components"
) => {
  return items.map((file) => {
    const functionName = file.split(".")[0];
    return {
      text: functionName,
      link: `${referencePath.replace(".", "")}/${location}/${functionName}`,
    };
  });
};

referencePackages.forEach(async (pkg) => {
  const cleanPkg = pkg.replace("@", "");
  const referencePath = `./reference/${cleanPkg}`;
  const functionFiles = await fs
    .readdir(path.resolve("./pages", referencePath, "./functions"))
    .catch(() => []);

  const hookFiles = await fs
    .readdir(path.resolve("./pages", referencePath, "./hooks"))
    .catch(() => []);
  const componentFiles = await fs
    .readdir(path.resolve("./pages", referencePath, "./components"))
    .catch(() => []);

  const functionItems = generateItems(
    functionFiles,
    referencePath,
    "functions"
  );
  const hookItems = generateItems(hookFiles, referencePath, "hooks");
  const componentItems = generateItems(
    componentFiles,
    referencePath,
    "components"
  );

  const hooksSection = hookItems.length
    ? { text: "Hooks", items: hookItems }
    : undefined;
  const componentsSection = componentItems.length
    ? { text: "Components", items: componentItems }
    : undefined;
  const functionsSection = functionItems.length
    ? { text: "Functions", items: functionItems }
    : undefined;

  const sidebarConst = `${camelCase(
    cleanPkg.split("/").join("-")
  )}ReferenceSidebar`;
  const sidebarContent = dedent`
  // This file is autogenerated, see scripts/prebuild.ts
  import { SidebarItem } from "vocs";

  export const ${sidebarConst}: SidebarItem[] = [
    {
        text: "${pkg}",
        items: [{
            text: "Overview",
            link: "${referencePath.replace(".", "")}"
        }],
    },
    ${[componentsSection, hooksSection, functionsSection]
      .filter((x) => x != null)
      .map((x) => JSON.stringify(x, null, 2))
      .join(",\n")}
  ];
  `;

  fs.outputFileSync(
    path.resolve("./sidebar", `${referencePath}.ts`),
    format(sidebarContent, { parser: "typescript" })
  );
});
