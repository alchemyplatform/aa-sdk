{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":"","sourcesContent":["import type { Address } from \"viem\";\n\nexport type User = {\n  email?: string;\n  orgId: string;\n  userId: string;\n  address: Address;\n  solanaAddress?: string;\n  credentialId?: string;\n  idToken?: string;\n  claims?: Record<string, unknown>;\n};\n\nexport type AuthMethods = {\n  email?: string;\n  oauthProviders: OauthProviderInfo[];\n  passkeys: PasskeyInfo[];\n};\n\nexport type OauthProviderInfo = {\n  providerId: string;\n  issuer: string;\n  providerName?: string;\n  userDisplayName?: string;\n};\n\nexport type PasskeyInfo = {\n  authenticatorId: string;\n  name: string;\n  createdAt: number;\n};\n\nexport type AddOauthProviderParams = {\n  providerName: string;\n  oidcToken: string;\n};\n\n// TO DO: clean up these types\n\nexport type KnownAuthProvider =\n  | \"google\"\n  | \"apple\"\n  | \"facebook\"\n  | \"twitch\"\n  | \"auth0\";\n\nexport type OauthProviderConfig =\n  | {\n      authProviderId: \"auth0\";\n      isCustomProvider?: false;\n      auth0Connection?: string;\n    }\n  | {\n      authProviderId: KnownAuthProvider;\n      isCustomProvider?: false;\n      auth0Connection?: never;\n    }\n  | {\n      authProviderId: string;\n      isCustomProvider: true;\n      auth0Connection?: never;\n    };\n\nexport type OauthParams = {\n  type: \"oauth\";\n  scope?: string;\n  claims?: string;\n  expirationSeconds?: number;\n  fetchIdTokenOnly?: boolean;\n  otherParameters?: Record<string, string>;\n  mode: \"popup\"; // TO DO: incorporate \"redirect\" mode later\n  redirectUrl?: never;\n} & OauthProviderConfig;\n\nexport type OauthConfig = {\n  codeChallenge: string;\n  requestKey: string;\n  authProviders: AuthProviderConfig[];\n};\n\nexport type AuthProviderConfig = {\n  id: string;\n  isCustomProvider?: boolean;\n  clientId: string;\n  authEndpoint: string;\n};\n\nexport type GetOauthProviderUrlArgs = {\n  oauthParams: OauthParams;\n  turnkeyPublicKey: string;\n  oauthCallbackUrl: string;\n  oauthConfig?: OauthConfig;\n  usesRelativeUrl?: boolean;\n};\n\n// ^TO DO: clean up these types\n\n/**\n * Re-exporting a type defined internally in Turnkey's SDK (where it's called\n * TStamper).\n */\nexport type TurnkeyStamper = {\n  stamp: (input: string) => Promise<TurnkeyStamp>;\n  clear?(): void;\n};\n\n/**\n * The methods we will use from the flavor of stamper that exposes a public TEK\n * and becomes fully initialized upon receiving a \"credential bundle\" which is\n * an encrypted private key. Describes both IFrameStamper and NativeTEKStamper.\n */\nexport type TurnkeyTekStamper = TurnkeyStamper & {\n  /**\n   * Initializes the stamper and returns its public key.\n   */\n  init: () => Promise<string>;\n  injectCredentialBundle: (bundle: string) => Promise<boolean>;\n};\n\nexport type CreateTekStamperFn = () => Promise<TurnkeyTekStamper>;\n\n/**\n * Creates a flavor of stamper which stamps requests by directly using a private\n * key accessed with WebAuthn (e.g. passkeys).\n */\nexport type CreateWebAuthnStamperFn = (\n  params: CreateWebAuthnStamperParams\n) => Promise<TurnkeyStamper>;\n\nexport type CreateWebAuthnStamperParams = {\n  credentialId: string | undefined;\n};\n\nexport type HandleOauthFlowFn = (authUrl: string) => Promise<OAuthFlowResponse>;\n\n// TODO: can make this type more crisp.\nexport type OAuthFlowResponse = {\n  status: \"SUCCESS\" | \"ACCOUNT_LINKING_CONFIRMATION_REQUIRED\";\n  bundle?: string;\n  orgId?: string;\n  idToken?: string;\n  email?: string;\n  providerName?: string;\n  otpId?: string;\n  error?: string;\n};\n\nexport type TurnkeyStamp = {\n  stampHeaderName: string;\n  stampHeaderValue: string;\n};\n"]}