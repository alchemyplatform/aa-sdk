import {
  getContract,
  encodeFunctionData,
  encodePacked,
  encodeAbiParameters,
  type Address,
  type GetContractReturnType,
  type GetFunctionArgs,
} from "viem";
import { type Plugin } from "../types.js";
import { type IMSCA } from "../../types.js";
import {
  type UserOperationOverrides,
  type SupportedTransports,
  type ISmartAccountProvider,
} from "@alchemy/aa-core";
import { MultiOwnerPlugin } from "../multi-owner/plugin.js";
import { installPlugin as installPlugin_ } from "../../plugin-manager/installPlugin.js";
import { type FunctionReference } from "../../account-loupe/types.js";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC6900PluginGen: This file is auto-generated by plugingen
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

type InstallArgs = [{ type: "address[]"; name: "initialPublicKeys" }];
export type InstallSessionKeyPluginParams = {
  args: Parameters<typeof encodeAbiParameters<InstallArgs>>[1];
  pluginAddress?: Address;
  dependencyOverrides?: FunctionReference[];
};

const addresses = {
  11155111: "0x60ae6D5887a67E18afDfA5786A8598464C123A07" as Address,
} as Record<number, Address>;

const SessionKeyPlugin_ = {
  meta: {
    name: "Session Key Plugin",
    version: "1.0.0",
    addresses,
  },
  getContract: (
    provider: ISmartAccountProvider,
    address?: Address
  ): GetContractReturnType<
    typeof SessionKeyPluginAbi,
    typeof provider.rpcClient,
    undefined,
    Address
  > =>
    getContract({
      address: address || addresses[provider.rpcClient.chain.id],
      abi: SessionKeyPluginAbi,
      publicClient: provider.rpcClient,
    }),
  accountMethods: (account: IMSCA<any, any, any>) => ({
    encodeExecuteWithSessionKeyData: ({
      args,
    }: GetFunctionArgs<
      typeof SessionKeyPluginExecutionFunctionAbi,
      "executeWithSessionKey"
    >) => {
      return encodeFunctionData({
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "executeWithSessionKey",
        args,
      });
    },

    encodeGetSessionKeysData: () => {
      return encodeFunctionData({
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "getSessionKeys",
      });
    },

    readGetSessionKeys: async () => {
      return account.rpcProvider.readContract({
        address: await account.getAddress(),
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "getSessionKeys",
      });
    },

    encodeIsSessionKeyData: ({
      args,
    }: GetFunctionArgs<
      typeof SessionKeyPluginExecutionFunctionAbi,
      "isSessionKey"
    >) => {
      return encodeFunctionData({
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "isSessionKey",
        args,
      });
    },

    readIsSessionKey: async ({
      args,
    }: GetFunctionArgs<
      typeof SessionKeyPluginExecutionFunctionAbi,
      "isSessionKey"
    >) => {
      return account.rpcProvider.readContract({
        address: await account.getAddress(),
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "isSessionKey",
        args,
      });
    },

    encodeUpdateSessionKeysData: ({
      args,
    }: GetFunctionArgs<
      typeof SessionKeyPluginExecutionFunctionAbi,
      "updateSessionKeys"
    >) => {
      return encodeFunctionData({
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "updateSessionKeys",
        args,
      });
    },
  }),
  providerMethods: <
    TTransport extends SupportedTransports,
    P extends ISmartAccountProvider<TTransport> & {
      account: IMSCA<TTransport>;
    }
  >(
    provider: P
  ) => ({
    executeWithSessionKey: (
      {
        args,
      }: GetFunctionArgs<
        typeof SessionKeyPluginExecutionFunctionAbi,
        "executeWithSessionKey"
      >,
      overrides?: UserOperationOverrides
    ) => {
      const callData = encodeFunctionData({
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "executeWithSessionKey",
        args,
      });

      return provider.sendUserOperation(callData, overrides);
    },

    updateSessionKeys: (
      {
        args,
      }: GetFunctionArgs<
        typeof SessionKeyPluginExecutionFunctionAbi,
        "updateSessionKeys"
      >,
      overrides?: UserOperationOverrides
    ) => {
      const callData = encodeFunctionData({
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "updateSessionKeys",
        args,
      });

      return provider.sendUserOperation(callData, overrides);
    },

    installSessionKeyPlugin: (
      params: InstallSessionKeyPluginParams,
      overrides?: UserOperationOverrides
    ) => {
      const chain = provider.rpcClient.chain;
      const dependencies = params.dependencyOverrides ?? [
        (() => {
          const pluginAddress = MultiOwnerPlugin.meta.addresses[chain.id];
          if (!pluginAddress) {
            throw new Error(
              "missing MultiOwnerPlugin address for chain " + chain.name
            );
          }

          return encodePacked(["address", "uint8"], [pluginAddress, 0x0]);
        })(),

        (() => {
          const pluginAddress = MultiOwnerPlugin.meta.addresses[chain.id];
          if (!pluginAddress) {
            throw new Error(
              "missing MultiOwnerPlugin address for chain " + chain.name
            );
          }

          return encodePacked(["address", "uint8"], [pluginAddress, 0x1]);
        })(),
      ];
      const pluginAddress =
        params.pluginAddress ??
        (SessionKeyPlugin_.meta.addresses[chain.id] as Address | undefined);

      if (!pluginAddress) {
        throw new Error(
          "missing SessionKeyPlugin address for chain " + chain.name
        );
      }

      return installPlugin_(
        provider,
        {
          pluginAddress,
          pluginInitData: encodeAbiParameters(
            [{ type: "address[]", name: "initialPublicKeys" }],
            params.args
          ),
          dependencies,
        },
        overrides
      );
    },
  }),
};

export const SessionKeyPlugin: Plugin<
  ReturnType<(typeof SessionKeyPlugin_)["accountMethods"]>,
  ReturnType<(typeof SessionKeyPlugin_)["providerMethods"]>,
  typeof SessionKeyPluginAbi
> = SessionKeyPlugin_;

export const SessionKeyPluginExecutionFunctionAbi = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "calls",
        internalType: "struct Call[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "value", internalType: "uint256", type: "uint256" },
          { name: "data", internalType: "bytes", type: "bytes" },
        ],
      },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "executeWithSessionKey",
    outputs: [{ name: "", internalType: "bytes[]", type: "bytes[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getSessionKeys",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "sessionKey", internalType: "address", type: "address" }],
    name: "isSessionKey",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "sessionKeysToAdd",
        internalType: "address[]",
        type: "address[]",
      },
      {
        name: "sessionKeysToRemove",
        internalType: "struct ISessionKeyPlugin.SessionKeyToRemove[]",
        type: "tuple[]",
        components: [
          { name: "sessionKey", internalType: "address", type: "address" },
          { name: "predecessor", internalType: "bytes32", type: "bytes32" },
        ],
      },
    ],
    name: "updateSessionKeys",
    outputs: [],
  },
] as const;

export const SessionKeyPluginAbi = [
  { type: "error", inputs: [], name: "AlreadyInitialized" },
  { type: "error", inputs: [], name: "InvalidAction" },
  {
    type: "error",
    inputs: [{ name: "sessionKey", internalType: "address", type: "address" }],
    name: "InvalidSessionKey",
  },
  {
    type: "error",
    inputs: [{ name: "caller", internalType: "address", type: "address" }],
    name: "NotAuthorized",
  },
  { type: "error", inputs: [], name: "NotContractCaller" },
  { type: "error", inputs: [], name: "NotImplemented" },
  { type: "error", inputs: [], name: "NotInitialized" },
  {
    type: "error",
    inputs: [{ name: "sessionKey", internalType: "address", type: "address" }],
    name: "SessionKeyAlreadyExists",
  },
  {
    type: "error",
    inputs: [{ name: "sessionKey", internalType: "address", type: "address" }],
    name: "SessionKeyNotFound",
  },
  {
    type: "error",
    inputs: [{ name: "sessionKey", internalType: "address", type: "address" }],
    name: "UnableToRemove",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "calls",
        internalType: "struct Call[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "value", internalType: "uint256", type: "uint256" },
          { name: "data", internalType: "bytes", type: "bytes" },
        ],
      },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "executeWithSessionKey",
    outputs: [{ name: "", internalType: "bytes[]", type: "bytes[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "sessionKey", internalType: "address", type: "address" },
    ],
    name: "findPredecessor",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getSessionKeys",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "sessionKey", internalType: "address", type: "address" }],
    name: "isSessionKey",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "sessionKey", internalType: "address", type: "address" },
    ],
    name: "isSessionKeyOf",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "pluginAppliedOn", internalType: "address", type: "address" },
      {
        name: "injectedHooksInfo",
        internalType: "struct IPluginManager.InjectedHooksInfo",
        type: "tuple",
        components: [
          {
            name: "preExecHookFunctionId",
            internalType: "uint8",
            type: "uint8",
          },
          { name: "isPostHookUsed", internalType: "bool", type: "bool" },
          {
            name: "postExecHookFunctionId",
            internalType: "uint8",
            type: "uint8",
          },
        ],
      },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "onHookApply",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "pluginAppliedOn", internalType: "address", type: "address" },
      {
        name: "injectedHooksInfo",
        internalType: "struct IPluginManager.InjectedHooksInfo",
        type: "tuple",
        components: [
          {
            name: "preExecHookFunctionId",
            internalType: "uint8",
            type: "uint8",
          },
          { name: "isPostHookUsed", internalType: "bool", type: "bool" },
          {
            name: "postExecHookFunctionId",
            internalType: "uint8",
            type: "uint8",
          },
        ],
      },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "onHookUnapply",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "data", internalType: "bytes", type: "bytes" }],
    name: "onInstall",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "", internalType: "bytes", type: "bytes" }],
    name: "onUninstall",
    outputs: [],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "pluginManifest",
    outputs: [
      {
        name: "",
        internalType: "struct PluginManifest",
        type: "tuple",
        components: [
          { name: "interfaceIds", internalType: "bytes4[]", type: "bytes4[]" },
          {
            name: "dependencyInterfaceIds",
            internalType: "bytes4[]",
            type: "bytes4[]",
          },
          {
            name: "executionFunctions",
            internalType: "bytes4[]",
            type: "bytes4[]",
          },
          {
            name: "permittedExecutionSelectors",
            internalType: "bytes4[]",
            type: "bytes4[]",
          },
          {
            name: "permitAnyExternalAddress",
            internalType: "bool",
            type: "bool",
          },
          { name: "canSpendNativeToken", internalType: "bool", type: "bool" },
          {
            name: "permittedExternalCalls",
            internalType: "struct ManifestExternalCallPermission[]",
            type: "tuple[]",
            components: [
              {
                name: "externalAddress",
                internalType: "address",
                type: "address",
              },
              { name: "permitAnySelector", internalType: "bool", type: "bool" },
              { name: "selectors", internalType: "bytes4[]", type: "bytes4[]" },
            ],
          },
          {
            name: "userOpValidationFunctions",
            internalType: "struct ManifestAssociatedFunction[]",
            type: "tuple[]",
            components: [
              {
                name: "executionSelector",
                internalType: "bytes4",
                type: "bytes4",
              },
              {
                name: "associatedFunction",
                internalType: "struct ManifestFunction",
                type: "tuple",
                components: [
                  {
                    name: "functionType",
                    internalType: "enum ManifestAssociatedFunctionType",
                    type: "uint8",
                  },
                  { name: "functionId", internalType: "uint8", type: "uint8" },
                  {
                    name: "dependencyIndex",
                    internalType: "uint256",
                    type: "uint256",
                  },
                ],
              },
            ],
          },
          {
            name: "runtimeValidationFunctions",
            internalType: "struct ManifestAssociatedFunction[]",
            type: "tuple[]",
            components: [
              {
                name: "executionSelector",
                internalType: "bytes4",
                type: "bytes4",
              },
              {
                name: "associatedFunction",
                internalType: "struct ManifestFunction",
                type: "tuple",
                components: [
                  {
                    name: "functionType",
                    internalType: "enum ManifestAssociatedFunctionType",
                    type: "uint8",
                  },
                  { name: "functionId", internalType: "uint8", type: "uint8" },
                  {
                    name: "dependencyIndex",
                    internalType: "uint256",
                    type: "uint256",
                  },
                ],
              },
            ],
          },
          {
            name: "preUserOpValidationHooks",
            internalType: "struct ManifestAssociatedFunction[]",
            type: "tuple[]",
            components: [
              {
                name: "executionSelector",
                internalType: "bytes4",
                type: "bytes4",
              },
              {
                name: "associatedFunction",
                internalType: "struct ManifestFunction",
                type: "tuple",
                components: [
                  {
                    name: "functionType",
                    internalType: "enum ManifestAssociatedFunctionType",
                    type: "uint8",
                  },
                  { name: "functionId", internalType: "uint8", type: "uint8" },
                  {
                    name: "dependencyIndex",
                    internalType: "uint256",
                    type: "uint256",
                  },
                ],
              },
            ],
          },
          {
            name: "preRuntimeValidationHooks",
            internalType: "struct ManifestAssociatedFunction[]",
            type: "tuple[]",
            components: [
              {
                name: "executionSelector",
                internalType: "bytes4",
                type: "bytes4",
              },
              {
                name: "associatedFunction",
                internalType: "struct ManifestFunction",
                type: "tuple",
                components: [
                  {
                    name: "functionType",
                    internalType: "enum ManifestAssociatedFunctionType",
                    type: "uint8",
                  },
                  { name: "functionId", internalType: "uint8", type: "uint8" },
                  {
                    name: "dependencyIndex",
                    internalType: "uint256",
                    type: "uint256",
                  },
                ],
              },
            ],
          },
          {
            name: "executionHooks",
            internalType: "struct ManifestExecutionHook[]",
            type: "tuple[]",
            components: [
              {
                name: "executionSelector",
                internalType: "bytes4",
                type: "bytes4",
              },
              {
                name: "preExecHook",
                internalType: "struct ManifestFunction",
                type: "tuple",
                components: [
                  {
                    name: "functionType",
                    internalType: "enum ManifestAssociatedFunctionType",
                    type: "uint8",
                  },
                  { name: "functionId", internalType: "uint8", type: "uint8" },
                  {
                    name: "dependencyIndex",
                    internalType: "uint256",
                    type: "uint256",
                  },
                ],
              },
              {
                name: "postExecHook",
                internalType: "struct ManifestFunction",
                type: "tuple",
                components: [
                  {
                    name: "functionType",
                    internalType: "enum ManifestAssociatedFunctionType",
                    type: "uint8",
                  },
                  { name: "functionId", internalType: "uint8", type: "uint8" },
                  {
                    name: "dependencyIndex",
                    internalType: "uint256",
                    type: "uint256",
                  },
                ],
              },
            ],
          },
          {
            name: "permittedCallHooks",
            internalType: "struct ManifestExecutionHook[]",
            type: "tuple[]",
            components: [
              {
                name: "executionSelector",
                internalType: "bytes4",
                type: "bytes4",
              },
              {
                name: "preExecHook",
                internalType: "struct ManifestFunction",
                type: "tuple",
                components: [
                  {
                    name: "functionType",
                    internalType: "enum ManifestAssociatedFunctionType",
                    type: "uint8",
                  },
                  { name: "functionId", internalType: "uint8", type: "uint8" },
                  {
                    name: "dependencyIndex",
                    internalType: "uint256",
                    type: "uint256",
                  },
                ],
              },
              {
                name: "postExecHook",
                internalType: "struct ManifestFunction",
                type: "tuple",
                components: [
                  {
                    name: "functionType",
                    internalType: "enum ManifestAssociatedFunctionType",
                    type: "uint8",
                  },
                  { name: "functionId", internalType: "uint8", type: "uint8" },
                  {
                    name: "dependencyIndex",
                    internalType: "uint256",
                    type: "uint256",
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "pluginMetadata",
    outputs: [
      {
        name: "",
        internalType: "struct PluginMetadata",
        type: "tuple",
        components: [
          { name: "name", internalType: "string", type: "string" },
          { name: "version", internalType: "string", type: "string" },
          { name: "author", internalType: "string", type: "string" },
          {
            name: "permissionDescriptors",
            internalType: "struct SelectorPermission[]",
            type: "tuple[]",
            components: [
              {
                name: "functionSelector",
                internalType: "bytes4",
                type: "bytes4",
              },
              {
                name: "permissionDescription",
                internalType: "string",
                type: "string",
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "functionId", internalType: "uint8", type: "uint8" },
      { name: "preExecHookData", internalType: "bytes", type: "bytes" },
    ],
    name: "postExecutionHook",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "functionId", internalType: "uint8", type: "uint8" },
      { name: "sender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "preExecutionHook",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "functionId", internalType: "uint8", type: "uint8" },
      { name: "sender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "preRuntimeValidationHook",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "functionId", internalType: "uint8", type: "uint8" },
      {
        name: "userOp",
        internalType: "struct UserOperation",
        type: "tuple",
        components: [
          { name: "sender", internalType: "address", type: "address" },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "initCode", internalType: "bytes", type: "bytes" },
          { name: "callData", internalType: "bytes", type: "bytes" },
          { name: "callGasLimit", internalType: "uint256", type: "uint256" },
          {
            name: "verificationGasLimit",
            internalType: "uint256",
            type: "uint256",
          },
          {
            name: "preVerificationGas",
            internalType: "uint256",
            type: "uint256",
          },
          { name: "maxFeePerGas", internalType: "uint256", type: "uint256" },
          {
            name: "maxPriorityFeePerGas",
            internalType: "uint256",
            type: "uint256",
          },
          { name: "paymasterAndData", internalType: "bytes", type: "bytes" },
          { name: "signature", internalType: "bytes", type: "bytes" },
        ],
      },
      { name: "userOpHash", internalType: "bytes32", type: "bytes32" },
    ],
    name: "preUserOpValidationHook",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "functionId", internalType: "uint8", type: "uint8" },
      { name: "sender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "runtimeValidationFunction",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "sessionKeysOf",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "sessionKeysToAdd",
        internalType: "address[]",
        type: "address[]",
      },
      {
        name: "sessionKeysToRemove",
        internalType: "struct ISessionKeyPlugin.SessionKeyToRemove[]",
        type: "tuple[]",
        components: [
          { name: "sessionKey", internalType: "address", type: "address" },
          { name: "predecessor", internalType: "bytes32", type: "bytes32" },
        ],
      },
    ],
    name: "updateSessionKeys",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "functionId", internalType: "uint8", type: "uint8" },
      {
        name: "userOp",
        internalType: "struct UserOperation",
        type: "tuple",
        components: [
          { name: "sender", internalType: "address", type: "address" },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "initCode", internalType: "bytes", type: "bytes" },
          { name: "callData", internalType: "bytes", type: "bytes" },
          { name: "callGasLimit", internalType: "uint256", type: "uint256" },
          {
            name: "verificationGasLimit",
            internalType: "uint256",
            type: "uint256",
          },
          {
            name: "preVerificationGas",
            internalType: "uint256",
            type: "uint256",
          },
          { name: "maxFeePerGas", internalType: "uint256", type: "uint256" },
          {
            name: "maxPriorityFeePerGas",
            internalType: "uint256",
            type: "uint256",
          },
          { name: "paymasterAndData", internalType: "bytes", type: "bytes" },
          { name: "signature", internalType: "bytes", type: "bytes" },
        ],
      },
      { name: "userOpHash", internalType: "bytes32", type: "bytes32" },
    ],
    name: "userOpValidationFunction",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
] as const;
