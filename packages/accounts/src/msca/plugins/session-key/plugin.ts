import { type Plugin } from "../types.js";
import {
  encodeFunctionData,
  encodePacked,
  encodeAbiParameters,
  type Address,
  type GetFunctionArgs,
} from "viem";
import { type IMSCA } from "../../types.js";
import {
  type UserOperationOverrides,
  type SupportedTransports,
  type ISmartAccountProvider,
} from "@alchemy/aa-core";
import { MultiOwnerPlugin } from "../multi-owner/plugin.js";
import { installPlugin as installPlugin_ } from "../../plugin-manager/installPlugin.js";
import { type InjectedHook } from "../../plugin-manager/types.js";
import { type FunctionReference } from "../../account-loupe/types.js";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC6900PluginGen: This file is auto-generated by plugingen
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

type InstallArgs = [{ type: "address[]"; name: "initialPublicKeys" }];
export type InstallSessionKeyPluginParams = {
  args: Parameters<typeof encodeAbiParameters<InstallArgs>>[1];
  pluginAddress?: Address;
  injectedHooks?: InjectedHook[];
  dependencyOverrides?: FunctionReference[];
};

const SessionKeyPlugin_ = {
  meta: {
    name: "Session Key Plugin",
    version: "1.0.0",
    addresses: {
      11155111: "0x60ae6D5887a67E18afDfA5786A8598464C123A07" as Address,
    } as Record<number, Address>,
  },
  accountMethods: (account: IMSCA<any, any>) => ({
    encodeExecuteWithSessionKeyData: ({
      args,
    }: GetFunctionArgs<
      typeof SessionKeyPluginExecutionFunctionAbi,
      "executeWithSessionKey"
    >) => {
      return encodeFunctionData({
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "executeWithSessionKey",
        args,
      });
    },

    encodeGetSessionKeysData: () => {
      return encodeFunctionData({
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "getSessionKeys",
      });
    },

    readGetSessionKeys: async () => {
      return account.rpcProvider.readContract({
        address: await account.getAddress(),
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "getSessionKeys",
      });
    },

    encodeIsSessionKeyData: ({
      args,
    }: GetFunctionArgs<
      typeof SessionKeyPluginExecutionFunctionAbi,
      "isSessionKey"
    >) => {
      return encodeFunctionData({
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "isSessionKey",
        args,
      });
    },

    readIsSessionKey: async ({
      args,
    }: GetFunctionArgs<
      typeof SessionKeyPluginExecutionFunctionAbi,
      "isSessionKey"
    >) => {
      return account.rpcProvider.readContract({
        address: await account.getAddress(),
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "isSessionKey",
        args,
      });
    },

    encodeUpdateSessionKeysData: ({
      args,
    }: GetFunctionArgs<
      typeof SessionKeyPluginExecutionFunctionAbi,
      "updateSessionKeys"
    >) => {
      return encodeFunctionData({
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "updateSessionKeys",
        args,
      });
    },
  }),
  providerMethods: <
    TTransport extends SupportedTransports,
    P extends ISmartAccountProvider<TTransport> & {
      account: IMSCA<TTransport>;
    }
  >(
    provider: P
  ) => ({
    executeWithSessionKey: (
      {
        args,
      }: GetFunctionArgs<
        typeof SessionKeyPluginExecutionFunctionAbi,
        "executeWithSessionKey"
      >,
      overrides?: UserOperationOverrides
    ) => {
      const callData = encodeFunctionData({
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "executeWithSessionKey",
        args,
      });

      return provider.sendUserOperation(callData, overrides);
    },

    updateSessionKeys: (
      {
        args,
      }: GetFunctionArgs<
        typeof SessionKeyPluginExecutionFunctionAbi,
        "updateSessionKeys"
      >,
      overrides?: UserOperationOverrides
    ) => {
      const callData = encodeFunctionData({
        abi: SessionKeyPluginExecutionFunctionAbi,
        functionName: "updateSessionKeys",
        args,
      });

      return provider.sendUserOperation(callData, overrides);
    },

    installSessionKeyPlugin: (
      params: InstallSessionKeyPluginParams,
      overrides?: UserOperationOverrides
    ) => {
      const chain = provider.rpcClient.chain;
      const dependencies = params.dependencyOverrides ?? [
        (() => {
          const pluginAddress = MultiOwnerPlugin.meta.addresses[chain.id];
          if (!pluginAddress) {
            throw new Error(
              "missing MultiOwnerPlugin address for chain " + chain.name
            );
          }

          return encodePacked(["address", "uint8"], [pluginAddress, 0x0]);
        })(),

        (() => {
          const pluginAddress = MultiOwnerPlugin.meta.addresses[chain.id];
          if (!pluginAddress) {
            throw new Error(
              "missing MultiOwnerPlugin address for chain " + chain.name
            );
          }

          return encodePacked(["address", "uint8"], [pluginAddress, 0x1]);
        })(),
      ];
      const pluginAddress =
        params.pluginAddress ??
        (SessionKeyPlugin_.meta.addresses[chain.id] as Address | undefined);

      if (!pluginAddress) {
        throw new Error(
          "missing SessionKeyPlugin address for chain " + chain.name
        );
      }

      return installPlugin_(
        provider,
        {
          pluginAddress,
          pluginInitData: encodeAbiParameters(
            [{ type: "address[]", name: "initialPublicKeys" }],
            params.args
          ),
          dependencies,
        },
        overrides
      );
    },
  }),
};

export const SessionKeyPlugin: Plugin<
  ReturnType<(typeof SessionKeyPlugin_)["accountMethods"]>,
  ReturnType<(typeof SessionKeyPlugin_)["providerMethods"]>
> = SessionKeyPlugin_;

export const SessionKeyPluginExecutionFunctionAbi = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "calls",
        internalType: "struct Call[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "value", internalType: "uint256", type: "uint256" },
          { name: "data", internalType: "bytes", type: "bytes" },
        ],
      },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "executeWithSessionKey",
    outputs: [{ name: "", internalType: "bytes[]", type: "bytes[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getSessionKeys",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "sessionKey", internalType: "address", type: "address" }],
    name: "isSessionKey",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "sessionKeysToAdd",
        internalType: "address[]",
        type: "address[]",
      },
      {
        name: "sessionKeysToRemove",
        internalType: "struct ISessionKeyPlugin.SessionKeyToRemove[]",
        type: "tuple[]",
        components: [
          { name: "sessionKey", internalType: "address", type: "address" },
          { name: "predecessor", internalType: "bytes32", type: "bytes32" },
        ],
      },
    ],
    name: "updateSessionKeys",
    outputs: [],
  },
] as const;
