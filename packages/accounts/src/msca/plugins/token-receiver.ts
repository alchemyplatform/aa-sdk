import { type Address, type GetFunctionArgs, encodeFunctionData } from "viem";
import type { Plugin } from "./types";
import type { IMSCA } from "../builder";
import type {
  ISmartAccountProvider,
  SupportedTransports,
} from "@alchemy/aa-core";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC6900PluginGen: This file is auto-generated by plugingen
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const TokenReceiverPlugin_ = {
  meta: {
    name: "Token Receiver Plugin",
    version: "1.0.0",
    addresses: {
      11155111: "0xa81C0AEaB22b21b4da8d8728063f6570384b48C9" as Address,
    },
  },
  accountMethods: (_account: IMSCA<any, any>) => ({
    encodeTokensReceivedData: ({
      args,
    }: GetFunctionArgs<
      typeof TokenReceiverPluginExecutionFunctionAbi,
      "tokensReceived"
    >) => {
      return encodeFunctionData({
        abi: TokenReceiverPluginExecutionFunctionAbi,
        functionName: "tokensReceived",
        args,
      });
    },

    encodeOnErc721ReceivedData: ({
      args,
    }: GetFunctionArgs<
      typeof TokenReceiverPluginExecutionFunctionAbi,
      "onERC721Received"
    >) => {
      return encodeFunctionData({
        abi: TokenReceiverPluginExecutionFunctionAbi,
        functionName: "onERC721Received",
        args,
      });
    },

    encodeOnErc1155ReceivedData: ({
      args,
    }: GetFunctionArgs<
      typeof TokenReceiverPluginExecutionFunctionAbi,
      "onERC1155Received"
    >) => {
      return encodeFunctionData({
        abi: TokenReceiverPluginExecutionFunctionAbi,
        functionName: "onERC1155Received",
        args,
      });
    },

    encodeOnErc1155BatchReceivedData: ({
      args,
    }: GetFunctionArgs<
      typeof TokenReceiverPluginExecutionFunctionAbi,
      "onERC1155BatchReceived"
    >) => {
      return encodeFunctionData({
        abi: TokenReceiverPluginExecutionFunctionAbi,
        functionName: "onERC1155BatchReceived",
        args,
      });
    },
  }),
  providerMethods: <
    TTransport extends SupportedTransports,
    P extends ISmartAccountProvider<TTransport> & {
      account: IMSCA<TTransport>;
    }
  >(
    provider: P
  ) => ({
    tokensReceived: ({
      args,
    }: GetFunctionArgs<
      typeof TokenReceiverPluginExecutionFunctionAbi,
      "tokensReceived"
    >) => {
      const callData = encodeFunctionData({
        abi: TokenReceiverPluginExecutionFunctionAbi,
        functionName: "tokensReceived",
        args,
      });

      return provider.sendUserOperation(callData);
    },

    onErc721Received: ({
      args,
    }: GetFunctionArgs<
      typeof TokenReceiverPluginExecutionFunctionAbi,
      "onERC721Received"
    >) => {
      const callData = encodeFunctionData({
        abi: TokenReceiverPluginExecutionFunctionAbi,
        functionName: "onERC721Received",
        args,
      });

      return provider.sendUserOperation(callData);
    },

    onErc1155Received: ({
      args,
    }: GetFunctionArgs<
      typeof TokenReceiverPluginExecutionFunctionAbi,
      "onERC1155Received"
    >) => {
      const callData = encodeFunctionData({
        abi: TokenReceiverPluginExecutionFunctionAbi,
        functionName: "onERC1155Received",
        args,
      });

      return provider.sendUserOperation(callData);
    },

    onErc1155BatchReceived: ({
      args,
    }: GetFunctionArgs<
      typeof TokenReceiverPluginExecutionFunctionAbi,
      "onERC1155BatchReceived"
    >) => {
      const callData = encodeFunctionData({
        abi: TokenReceiverPluginExecutionFunctionAbi,
        functionName: "onERC1155BatchReceived",
        args,
      });

      return provider.sendUserOperation(callData);
    },
  }),
};

export const TokenReceiverPlugin: Plugin<
  ReturnType<(typeof TokenReceiverPlugin_)["accountMethods"]>,
  ReturnType<(typeof TokenReceiverPlugin_)["providerMethods"]>
> = TokenReceiverPlugin_;

export const TokenReceiverPluginExecutionFunctionAbi = [
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "bytes", type: "bytes" },
      { name: "", internalType: "bytes", type: "bytes" },
    ],
    name: "tokensReceived",
    outputs: [],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "bytes", type: "bytes" },
    ],
    name: "onERC721Received",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "bytes", type: "bytes" },
    ],
    name: "onERC1155Received",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256[]", type: "uint256[]" },
      { name: "", internalType: "uint256[]", type: "uint256[]" },
      { name: "", internalType: "bytes", type: "bytes" },
    ],
    name: "onERC1155BatchReceived",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
  },
] as const;
