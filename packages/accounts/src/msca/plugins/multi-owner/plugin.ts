import { type Plugin } from "../types.js";
import {
  encodeFunctionData,
  encodeAbiParameters,
  type Address,
  type GetFunctionArgs,
} from "viem";
import { type IMSCA } from "../../types.js";
import {
  type UserOperationOverrides,
  type SupportedTransports,
  type ISmartAccountProvider,
} from "@alchemy/aa-core";
import { installPlugin as installPlugin_ } from "../../plugin-manager/installPlugin.js";
import { type InjectedHook } from "../../plugin-manager/types.js";
import { type FunctionReference } from "../../account-loupe/types.js";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC6900PluginGen: This file is auto-generated by plugingen
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

type InstallArgs = [{ type: "address[]" }];
export type InstallMultiOwnerPluginParams = {
  args: Parameters<typeof encodeAbiParameters<InstallArgs>>[1];
  pluginAddress?: Address;
  injectedHooks?: InjectedHook[];
  dependencyOverrides?: FunctionReference[];
};

const MultiOwnerPlugin_ = {
  meta: {
    name: "Multi Owner Plugin",
    version: "1.0.0",
    addresses: {
      11155111: "0x56bC629F342821FBe91C5273880792dFECBE7920" as Address,
    } as Record<number, Address>,
  },
  accountMethods: (account: IMSCA<any, any>) => ({
    encodeUpdateOwnersData: ({
      args,
    }: GetFunctionArgs<
      typeof MultiOwnerPluginExecutionFunctionAbi,
      "updateOwners"
    >) => {
      return encodeFunctionData({
        abi: MultiOwnerPluginExecutionFunctionAbi,
        functionName: "updateOwners",
        args,
      });
    },

    encodeOwnersData: () => {
      return encodeFunctionData({
        abi: MultiOwnerPluginExecutionFunctionAbi,
        functionName: "owners",
      });
    },

    readOwners: async () => {
      return account.rpcProvider.readContract({
        address: await account.getAddress(),
        abi: MultiOwnerPluginExecutionFunctionAbi,
        functionName: "owners",
      });
    },

    encodeIsOwnerData: ({
      args,
    }: GetFunctionArgs<
      typeof MultiOwnerPluginExecutionFunctionAbi,
      "isOwner"
    >) => {
      return encodeFunctionData({
        abi: MultiOwnerPluginExecutionFunctionAbi,
        functionName: "isOwner",
        args,
      });
    },

    readIsOwner: async ({
      args,
    }: GetFunctionArgs<
      typeof MultiOwnerPluginExecutionFunctionAbi,
      "isOwner"
    >) => {
      return account.rpcProvider.readContract({
        address: await account.getAddress(),
        abi: MultiOwnerPluginExecutionFunctionAbi,
        functionName: "isOwner",
        args,
      });
    },

    encodeEip712DomainData: () => {
      return encodeFunctionData({
        abi: MultiOwnerPluginExecutionFunctionAbi,
        functionName: "eip712Domain",
      });
    },

    readEip712Domain: async () => {
      return account.rpcProvider.readContract({
        address: await account.getAddress(),
        abi: MultiOwnerPluginExecutionFunctionAbi,
        functionName: "eip712Domain",
      });
    },

    encodeIsValidSignatureData: ({
      args,
    }: GetFunctionArgs<
      typeof MultiOwnerPluginExecutionFunctionAbi,
      "isValidSignature"
    >) => {
      return encodeFunctionData({
        abi: MultiOwnerPluginExecutionFunctionAbi,
        functionName: "isValidSignature",
        args,
      });
    },

    readIsValidSignature: async ({
      args,
    }: GetFunctionArgs<
      typeof MultiOwnerPluginExecutionFunctionAbi,
      "isValidSignature"
    >) => {
      return account.rpcProvider.readContract({
        address: await account.getAddress(),
        abi: MultiOwnerPluginExecutionFunctionAbi,
        functionName: "isValidSignature",
        args,
      });
    },
  }),
  providerMethods: <
    TTransport extends SupportedTransports,
    P extends ISmartAccountProvider<TTransport> & {
      account: IMSCA<TTransport>;
    }
  >(
    provider: P
  ) => ({
    updateOwners: (
      {
        args,
      }: GetFunctionArgs<
        typeof MultiOwnerPluginExecutionFunctionAbi,
        "updateOwners"
      >,
      overrides?: UserOperationOverrides
    ) => {
      const callData = encodeFunctionData({
        abi: MultiOwnerPluginExecutionFunctionAbi,
        functionName: "updateOwners",
        args,
      });

      return provider.sendUserOperation(callData, overrides);
    },

    installMultiOwnerPlugin: (
      params: InstallMultiOwnerPluginParams,
      overrides?: UserOperationOverrides
    ) => {
      const chain = provider.rpcClient.chain;
      const dependencies = params.dependencyOverrides ?? [];
      const pluginAddress =
        params.pluginAddress ??
        (MultiOwnerPlugin_.meta.addresses[chain.id] as Address | undefined);

      if (!pluginAddress) {
        throw new Error(
          "missing MultiOwnerPlugin address for chain " + chain.name
        );
      }

      return installPlugin_(
        provider,
        {
          pluginAddress,
          pluginInitData: encodeAbiParameters(
            [{ type: "address[]" }],
            params.args
          ),
          dependencies,
        },
        overrides
      );
    },
  }),
};

export const MultiOwnerPlugin: Plugin<
  ReturnType<(typeof MultiOwnerPlugin_)["accountMethods"]>,
  ReturnType<(typeof MultiOwnerPlugin_)["providerMethods"]>
> = MultiOwnerPlugin_;

export const MultiOwnerPluginExecutionFunctionAbi = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "ownersToAdd", internalType: "address[]", type: "address[]" },
      { name: "ownersToRemove", internalType: "address[]", type: "address[]" },
    ],
    name: "updateOwners",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owners",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "ownerToCheck", internalType: "address", type: "address" },
    ],
    name: "isOwner",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "eip712Domain",
    outputs: [
      { name: "fields", internalType: "bytes1", type: "bytes1" },
      { name: "name", internalType: "string", type: "string" },
      { name: "version", internalType: "string", type: "string" },
      { name: "chainId", internalType: "uint256", type: "uint256" },
      { name: "verifyingContract", internalType: "address", type: "address" },
      { name: "salt", internalType: "bytes32", type: "bytes32" },
      { name: "extensions", internalType: "uint256[]", type: "uint256[]" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "digest", internalType: "bytes32", type: "bytes32" },
      { name: "signature", internalType: "bytes", type: "bytes" },
    ],
    name: "isValidSignature",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
  },
] as const;
