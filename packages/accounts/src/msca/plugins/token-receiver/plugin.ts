import {
  getContract,
  encodeAbiParameters,
  encodeFunctionData,
  type Address,
  type GetContractReturnType,
  type Transport,
  type PublicClient,
  type Client,
  type GetFunctionArgs,
  type Chain,
  type Hex,
} from 'viem'
import {
  type SmartAccountClient,
  type SmartContractAccount,
  type UserOperationOverrides,
  type GetAccountParameter,
  type SendUserOperationResult,
} from '@alchemy/aa-core'
import { type Plugin } from '../types.js'
import { installPlugin as installPlugin_ } from '../../plugin-manager/installPlugin.js'
import { type FunctionReference } from '../../account-loupe/types.js'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC6900PluginGen: This file is auto-generated by plugingen
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

type ExecutionActions<
  TAccount extends SmartContractAccount | undefined =
    | SmartContractAccount
    | undefined,
> = {
  tokensReceived: (
    args: GetFunctionArgs<
      typeof TokenReceiverPluginExecutionFunctionAbi,
      'tokensReceived'
    > & { overrides?: UserOperationOverrides } & GetAccountParameter<TAccount>,
  ) => Promise<SendUserOperationResult>

  onErc721Received: (
    args: GetFunctionArgs<
      typeof TokenReceiverPluginExecutionFunctionAbi,
      'onERC721Received'
    > & { overrides?: UserOperationOverrides } & GetAccountParameter<TAccount>,
  ) => Promise<SendUserOperationResult>

  onErc1155Received: (
    args: GetFunctionArgs<
      typeof TokenReceiverPluginExecutionFunctionAbi,
      'onERC1155Received'
    > & { overrides?: UserOperationOverrides } & GetAccountParameter<TAccount>,
  ) => Promise<SendUserOperationResult>

  onErc1155BatchReceived: (
    args: GetFunctionArgs<
      typeof TokenReceiverPluginExecutionFunctionAbi,
      'onERC1155BatchReceived'
    > & { overrides?: UserOperationOverrides } & GetAccountParameter<TAccount>,
  ) => Promise<SendUserOperationResult>
}

type InstallArgs = []

export type InstallTokenReceiverPluginParams = {
  args: Parameters<typeof encodeAbiParameters<InstallArgs>>[1]
  pluginAddress?: Address
  dependencyOverrides?: FunctionReference[]
}

type ManagementActions<
  TAccount extends SmartContractAccount | undefined =
    | SmartContractAccount
    | undefined,
> = {
  installTokenReceiverPlugin: (
    args: {
      overrides?: UserOperationOverrides
    } & InstallTokenReceiverPluginParams &
      GetAccountParameter<TAccount>,
  ) => Promise<SendUserOperationResult>
}

type ReadAndEncodeActions = {
  encodeTokensReceived: (
    args: GetFunctionArgs<
      typeof TokenReceiverPluginExecutionFunctionAbi,
      'tokensReceived'
    >,
  ) => Hex

  encodeOnErc721Received: (
    args: GetFunctionArgs<
      typeof TokenReceiverPluginExecutionFunctionAbi,
      'onERC721Received'
    >,
  ) => Hex

  encodeOnErc1155Received: (
    args: GetFunctionArgs<
      typeof TokenReceiverPluginExecutionFunctionAbi,
      'onERC1155Received'
    >,
  ) => Hex

  encodeOnErc1155BatchReceived: (
    args: GetFunctionArgs<
      typeof TokenReceiverPluginExecutionFunctionAbi,
      'onERC1155BatchReceived'
    >,
  ) => Hex
}

export type TokenReceiverPluginActions<
  TAccount extends SmartContractAccount | undefined =
    | SmartContractAccount
    | undefined,
> = ExecutionActions<TAccount> &
  ManagementActions<TAccount> &
  ReadAndEncodeActions

const addresses = {
  11155111: '0x360b59D3D922fe6b015257390b35E7dBA8632A50' as Address,
} as Record<number, Address>

export const TokenReceiverPlugin: Plugin<typeof TokenReceiverPluginAbi> = {
  meta: {
    name: 'Token Receiver Plugin',
    version: '1.0.0',
    addresses,
  },
  getContract: <C extends Client>(
    client: C,
    address?: Address,
  ): GetContractReturnType<
    typeof TokenReceiverPluginAbi,
    PublicClient,
    undefined,
    Address
  > => {
    if (!client.chain) throw new Error('Missing chain on client')

    return getContract({
      address: address || addresses[client.chain.id],
      abi: TokenReceiverPluginAbi,
      publicClient: client,
    })
  },
}

export const tokenReceiverPluginActions: <
  TTransport extends Transport = Transport,
  TChain extends Chain | undefined = Chain | undefined,
  TAccount extends SmartContractAccount | undefined =
    | SmartContractAccount
    | undefined,
>(
  client: SmartAccountClient<TTransport, TChain, TAccount>,
) => TokenReceiverPluginActions<TAccount> = <
  TTransport extends Transport = Transport,
  TChain extends Chain | undefined = Chain | undefined,
  TAccount extends SmartContractAccount | undefined =
    | SmartContractAccount
    | undefined,
>(
  client: SmartAccountClient<TTransport, TChain, TAccount>,
) => ({
  tokensReceived({ args, overrides, account = client.account }) {
    if (!account) {
      throw new Error('account is required')
    }

    const uo = encodeFunctionData({
      abi: TokenReceiverPluginExecutionFunctionAbi,
      functionName: 'tokensReceived',
      args,
    })

    return client.sendUserOperation({ uo, overrides, account })
  },
  onErc721Received({ args, overrides, account = client.account }) {
    if (!account) {
      throw new Error('account is required')
    }

    const uo = encodeFunctionData({
      abi: TokenReceiverPluginExecutionFunctionAbi,
      functionName: 'onERC721Received',
      args,
    })

    return client.sendUserOperation({ uo, overrides, account })
  },
  onErc1155Received({ args, overrides, account = client.account }) {
    if (!account) {
      throw new Error('account is required')
    }

    const uo = encodeFunctionData({
      abi: TokenReceiverPluginExecutionFunctionAbi,
      functionName: 'onERC1155Received',
      args,
    })

    return client.sendUserOperation({ uo, overrides, account })
  },
  onErc1155BatchReceived({ args, overrides, account = client.account }) {
    if (!account) {
      throw new Error('account is required')
    }

    const uo = encodeFunctionData({
      abi: TokenReceiverPluginExecutionFunctionAbi,
      functionName: 'onERC1155BatchReceived',
      args,
    })

    return client.sendUserOperation({ uo, overrides, account })
  },
  installTokenReceiverPlugin({
    account = client.account,
    overrides,
    ...params
  }) {
    if (!account) {
      throw new Error('Account is required')
    }

    const chain = client.chain
    if (!chain) {
      throw new Error('Chain is required')
    }

    const dependencies = params.dependencyOverrides ?? []
    const pluginAddress =
      params.pluginAddress ??
      (TokenReceiverPlugin.meta.addresses[chain.id] as Address | undefined)

    if (!pluginAddress) {
      throw new Error(
        'missing TokenReceiverPlugin address for chain ' + chain.name,
      )
    }

    return installPlugin_(client, {
      pluginAddress,
      pluginInitData: encodeAbiParameters([], params.args),
      dependencies,
      overrides,
      account,
    })
  },
  encodeTokensReceived({ args }) {
    return encodeFunctionData({
      abi: TokenReceiverPluginExecutionFunctionAbi,
      functionName: 'tokensReceived',
      args,
    })
  },
  encodeOnErc721Received({ args }) {
    return encodeFunctionData({
      abi: TokenReceiverPluginExecutionFunctionAbi,
      functionName: 'onERC721Received',
      args,
    })
  },
  encodeOnErc1155Received({ args }) {
    return encodeFunctionData({
      abi: TokenReceiverPluginExecutionFunctionAbi,
      functionName: 'onERC1155Received',
      args,
    })
  },
  encodeOnErc1155BatchReceived({ args }) {
    return encodeFunctionData({
      abi: TokenReceiverPluginExecutionFunctionAbi,
      functionName: 'onERC1155BatchReceived',
      args,
    })
  },
})

export const TokenReceiverPluginExecutionFunctionAbi = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'tokensReceived',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

export const TokenReceiverPluginAbi = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    name: 'onInstall',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    name: 'onUninstall',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'pluginManifest',
    outputs: [
      {
        name: '',
        internalType: 'struct PluginManifest',
        type: 'tuple',
        components: [
          { name: 'interfaceIds', internalType: 'bytes4[]', type: 'bytes4[]' },
          {
            name: 'dependencyInterfaceIds',
            internalType: 'bytes4[]',
            type: 'bytes4[]',
          },
          {
            name: 'executionFunctions',
            internalType: 'bytes4[]',
            type: 'bytes4[]',
          },
          {
            name: 'permittedExecutionSelectors',
            internalType: 'bytes4[]',
            type: 'bytes4[]',
          },
          {
            name: 'permitAnyExternalAddress',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'canSpendNativeToken', internalType: 'bool', type: 'bool' },
          {
            name: 'permittedExternalCalls',
            internalType: 'struct ManifestExternalCallPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'externalAddress',
                internalType: 'address',
                type: 'address',
              },
              { name: 'permitAnySelector', internalType: 'bool', type: 'bool' },
              { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
            ],
          },
          {
            name: 'userOpValidationFunctions',
            internalType: 'struct ManifestAssociatedFunction[]',
            type: 'tuple[]',
            components: [
              {
                name: 'executionSelector',
                internalType: 'bytes4',
                type: 'bytes4',
              },
              {
                name: 'associatedFunction',
                internalType: 'struct ManifestFunction',
                type: 'tuple',
                components: [
                  {
                    name: 'functionType',
                    internalType: 'enum ManifestAssociatedFunctionType',
                    type: 'uint8',
                  },
                  { name: 'functionId', internalType: 'uint8', type: 'uint8' },
                  {
                    name: 'dependencyIndex',
                    internalType: 'uint256',
                    type: 'uint256',
                  },
                ],
              },
            ],
          },
          {
            name: 'runtimeValidationFunctions',
            internalType: 'struct ManifestAssociatedFunction[]',
            type: 'tuple[]',
            components: [
              {
                name: 'executionSelector',
                internalType: 'bytes4',
                type: 'bytes4',
              },
              {
                name: 'associatedFunction',
                internalType: 'struct ManifestFunction',
                type: 'tuple',
                components: [
                  {
                    name: 'functionType',
                    internalType: 'enum ManifestAssociatedFunctionType',
                    type: 'uint8',
                  },
                  { name: 'functionId', internalType: 'uint8', type: 'uint8' },
                  {
                    name: 'dependencyIndex',
                    internalType: 'uint256',
                    type: 'uint256',
                  },
                ],
              },
            ],
          },
          {
            name: 'preUserOpValidationHooks',
            internalType: 'struct ManifestAssociatedFunction[]',
            type: 'tuple[]',
            components: [
              {
                name: 'executionSelector',
                internalType: 'bytes4',
                type: 'bytes4',
              },
              {
                name: 'associatedFunction',
                internalType: 'struct ManifestFunction',
                type: 'tuple',
                components: [
                  {
                    name: 'functionType',
                    internalType: 'enum ManifestAssociatedFunctionType',
                    type: 'uint8',
                  },
                  { name: 'functionId', internalType: 'uint8', type: 'uint8' },
                  {
                    name: 'dependencyIndex',
                    internalType: 'uint256',
                    type: 'uint256',
                  },
                ],
              },
            ],
          },
          {
            name: 'preRuntimeValidationHooks',
            internalType: 'struct ManifestAssociatedFunction[]',
            type: 'tuple[]',
            components: [
              {
                name: 'executionSelector',
                internalType: 'bytes4',
                type: 'bytes4',
              },
              {
                name: 'associatedFunction',
                internalType: 'struct ManifestFunction',
                type: 'tuple',
                components: [
                  {
                    name: 'functionType',
                    internalType: 'enum ManifestAssociatedFunctionType',
                    type: 'uint8',
                  },
                  { name: 'functionId', internalType: 'uint8', type: 'uint8' },
                  {
                    name: 'dependencyIndex',
                    internalType: 'uint256',
                    type: 'uint256',
                  },
                ],
              },
            ],
          },
          {
            name: 'executionHooks',
            internalType: 'struct ManifestExecutionHook[]',
            type: 'tuple[]',
            components: [
              {
                name: 'executionSelector',
                internalType: 'bytes4',
                type: 'bytes4',
              },
              {
                name: 'preExecHook',
                internalType: 'struct ManifestFunction',
                type: 'tuple',
                components: [
                  {
                    name: 'functionType',
                    internalType: 'enum ManifestAssociatedFunctionType',
                    type: 'uint8',
                  },
                  { name: 'functionId', internalType: 'uint8', type: 'uint8' },
                  {
                    name: 'dependencyIndex',
                    internalType: 'uint256',
                    type: 'uint256',
                  },
                ],
              },
              {
                name: 'postExecHook',
                internalType: 'struct ManifestFunction',
                type: 'tuple',
                components: [
                  {
                    name: 'functionType',
                    internalType: 'enum ManifestAssociatedFunctionType',
                    type: 'uint8',
                  },
                  { name: 'functionId', internalType: 'uint8', type: 'uint8' },
                  {
                    name: 'dependencyIndex',
                    internalType: 'uint256',
                    type: 'uint256',
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'pluginMetadata',
    outputs: [
      {
        name: '',
        internalType: 'struct PluginMetadata',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'version', internalType: 'string', type: 'string' },
          { name: 'author', internalType: 'string', type: 'string' },
          {
            name: 'permissionDescriptors',
            internalType: 'struct SelectorPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'functionSelector',
                internalType: 'bytes4',
                type: 'bytes4',
              },
              {
                name: 'permissionDescription',
                internalType: 'string',
                type: 'string',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'functionId', internalType: 'uint8', type: 'uint8' },
      { name: 'preExecHookData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'postExecutionHook',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'functionId', internalType: 'uint8', type: 'uint8' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'preExecutionHook',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'functionId', internalType: 'uint8', type: 'uint8' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'preRuntimeValidationHook',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'functionId', internalType: 'uint8', type: 'uint8' },
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'preUserOpValidationHook',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'functionId', internalType: 'uint8', type: 'uint8' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'runtimeValidationFunction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'tokensReceived',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'functionId', internalType: 'uint8', type: 'uint8' },
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'userOpValidationFunction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  { type: 'error', inputs: [], name: 'InvalidAction' },
  {
    type: 'error',
    inputs: [{ name: 'caller', internalType: 'address', type: 'address' }],
    name: 'NotContractCaller',
  },
  {
    type: 'error',
    inputs: [
      { name: 'selector', internalType: 'bytes4', type: 'bytes4' },
      { name: 'functionId', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'NotImplemented',
  },
  { type: 'error', inputs: [], name: 'NotInitialized' },
] as const
