import groovy.json.JsonSlurper
import com.vanniktech.maven.publish.AndroidSingleVariantLibrary
import com.vanniktech.maven.publish.SonatypeHost

buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["ReactNativeSigner_kotlinVersion"]

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.1"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

plugins {
  id 'org.jetbrains.kotlin.plugin.serialization' version "$ReactNativeSigner_kotlinVersion"
  id("com.vanniktech.maven.publish") version "0.30.0"
}

def kotlin_version = getExtOrDefault("kotlinVersion")

def reactNativeArchitectures() {
  def value = rootProject.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["ReactNativeSigner_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["ReactNativeSigner_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "com.accountkit.reactnativesigner"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()

  }

  buildFeatures {
    buildConfig true
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  sourceSets {
    main {
      if (isNewArchitectureEnabled()) {
          java.srcDirs += [
            "generated/java",
            "generated/jni"
          ]
      }
    }
  }
}

def getLibraryVersion() {
  def packageFile = file("../package.json")
  def packageJson = new JsonSlurper().parseText(packageFile.getText()) as Map<String, String>
  return packageJson["version"] as String
}

mavenPublishing {
  configure(new AndroidSingleVariantLibrary("release", true, true))
  publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)
  signAllPublications()

  coordinates("com.alchemy.accountkit", "reactnativesigner", getLibraryVersion())

  pom {
    name = "Account Kit React Native Stamper"
    description = "React Native Android module for Stamping requests with the Alchemy Signer"
    inceptionYear = "2024"
    url = "https://github.com/alchemyplatform/aa-sdk/"
    licenses {
      license {
        name = "MIT License"
        url = "https://github.com/alchemyplatform/aa-sdk/blob/main/LICENSE"
        distribution = "https://github.com/alchemyplatform/aa-sdk/blob/main/LICENSE"
      }
    }
    developers {
      // TODO: this needs to be like alchemyplatform or something
      developer {
        id = "moldy530"
        name = "Michael Moldoveanu"
        url = "https://github.com/moldy530"
      }
    }
    scm {
      url = "https://github.com/alchemyplatform/aa-sdk/"
      connection = "scm:git:git://github.com/alchemyplatform/aa-sdk.git"
      developerConnection = "scm:git:ssh://git@github.com/alchemyplatform/aa-sdk.git"
    }
  }
}

repositories {
  mavenCentral()
  google()
}

dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  // TODO: 1) we should assume folks are on > 0.71 (they have to be for new arch) and then we should read the correct version from pkg.json
  // of the dependency
  // we can't use "com.facebook.react:react-native:+" here because it won't publish to maven if we do
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-android:0.76"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  api "javax.xml.bind:jaxb-api:2.3.1"
  api "xerces:xercesImpl:2.12.2"
  api "androidx.security:security-crypto:1.1.0-alpha06"
  api "com.google.crypto.tink:tink-android:1.15.0"
  api "org.bitcoinj:bitcoinj-core:0.16.3"
  implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1"
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "ReactNativeSigner"
    codegenJavaPackageName = "com.accountkit.reactnativesigner"
  }
}

task extractJar(type: Copy) {
    def aarFile = file("$buildDir/outputs/aar/${project.name}-release.aar")
    def outputDir = file("$buildDir/libs")
    from(zipTree(aarFile)) {
        include "classes.jar"
    }
    into(outputDir)
    rename { "${project.name}.jar" }
}
extractJar.dependsOn("assembleRelease")
