// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Alchemy Transport Tests > should correctly create a split transport 1`] = `
[
  {
    "fallback": [Function],
    "overrides": [
      {
        "methods": [
          "eth_sendUserOperation",
          "eth_estimateUserOperationGas",
          "eth_getUserOperationReceipt",
          "eth_getUserOperationByHash",
          "eth_supportedEntryPoints",
          "rundler_maxPriorityFeePerGas",
          "pm_getPaymasterData",
          "pm_getPaymasterStubData",
        ],
        "transport": [Function],
      },
    ],
  },
]
`;

exports[`Alchemy Transport Tests > should correctly create a split transport 2`] = `
[
  {
    "fallback": [Function],
    "overrides": [
      {
        "methods": [
          "eth_sendUserOperation",
          "eth_estimateUserOperationGas",
          "eth_getUserOperationReceipt",
          "eth_getUserOperationByHash",
          "eth_supportedEntryPoints",
          "rundler_maxPriorityFeePerGas",
          "pm_getPaymasterData",
          "pm_getPaymasterStubData",
        ],
        "transport": [Function],
      },
    ],
  },
]
`;

exports[`Alchemy Transport Tests > should correctly create a split transport 3`] = `
[
  {
    "fallback": [Function],
    "overrides": [
      {
        "methods": [
          "eth_sendUserOperation",
          "eth_estimateUserOperationGas",
          "eth_getUserOperationReceipt",
          "eth_getUserOperationByHash",
          "eth_supportedEntryPoints",
          "rundler_maxPriorityFeePerGas",
          "pm_getPaymasterData",
          "pm_getPaymasterStubData",
        ],
        "transport": [Function],
      },
    ],
  },
]
`;

exports[`Alchemy Transport Tests > should correctly create a split transport 4`] = `
[
  {
    "fallback": [Function],
    "overrides": [
      {
        "methods": [
          "eth_sendUserOperation",
          "eth_estimateUserOperationGas",
          "eth_getUserOperationReceipt",
          "eth_getUserOperationByHash",
          "eth_supportedEntryPoints",
          "rundler_maxPriorityFeePerGas",
          "pm_getPaymasterData",
          "pm_getPaymasterStubData",
        ],
        "transport": [Function],
      },
    ],
  },
]
`;
