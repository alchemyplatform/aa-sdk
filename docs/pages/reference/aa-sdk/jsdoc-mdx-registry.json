{
  "@aa-sdk/core:bundlerActions": {
    "functionName": "bundlerActions",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/bundlerActions",
    "mdxContent": "---\n# This file is autogenerated\ntitle: bundlerActions\ndescription: Overview of the bundlerActions method\nslug: wallets/reference/aa-sdk/core/functions/bundlerActions\n---\n\nA viem client decorator that provides Bundler specific actions.\nThese actions include estimating gas for user operations, sending raw user operations, retrieving user operations by hash, getting supported entry points, and getting user operation receipts.\n\nNOTE: this is already added to the client returned from `createBundlerClient`\n\n## Import\n\n```ts\nimport { bundlerActions } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### client\n\n`TClient`\nThe client instance that will be used to perform bundler actions\n\n## Returns\n\n`BundlerActions`\nAn object containing various bundler-related actions that can be executed using the provided client\n"
  },
  "@aa-sdk/core:smartAccountClientActions": {
    "functionName": "smartAccountClientActions",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/smartAccountClientActions",
    "mdxContent": "---\n# This file is autogenerated\ntitle: smartAccountClientActions\ndescription: Overview of the smartAccountClientActions method\nslug: wallets/reference/aa-sdk/core/functions/smartAccountClientActions\n---\n\nProvides a set of smart account client actions to decorate the provided client. These actions include building and signing user operations, sending transactions, and more.\n\nNOTE: this is already added to clients returned from `createSmartAccountClient`\n\n## Import\n\n```ts\nimport { smartAccountClientActions } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### client\n\n`Client<TTransport, TChain, TAccount>`\nThe client to bind the smart account actions to\n\n## Returns\n\n`BaseSmartAccountClientActions<TChain, TAccount, TContext>`\nAn object containing various smart account client actions\n"
  },
  "@aa-sdk/core:isSmartAccountClient": {
    "functionName": "isSmartAccountClient",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/isSmartAccountClient",
    "mdxContent": "---\n# This file is autogenerated\ntitle: isSmartAccountClient\ndescription: Overview of the isSmartAccountClient method\nslug: wallets/reference/aa-sdk/core/functions/isSmartAccountClient\n---\n\nUse this method to assert that a client is a BaseSmartAccountClient.\nUseful for narrowing the type of the client down when used within the\nsmart account client decorators\n\n## Import\n\n```ts\nimport { isSmartAccountClient } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### client\n\n`Client<TTransport, TChain, TAccount>`\na viem client\n\n## Returns\n\n`boolean`\ntrue if the client is a SmartAccountClient\n"
  },
  "@aa-sdk/core:middlewareActions": {
    "functionName": "middlewareActions",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/middlewareActions",
    "mdxContent": "---\n# This file is autogenerated\ntitle: middlewareActions\ndescription: Overview of the middlewareActions method\nslug: wallets/reference/aa-sdk/core/functions/middlewareActions\n---\n\nfunction that takes in ClientMiddlewareConfig used during client initiation\nand returns the middleware actions object that the smart account client extends with\n\n## Import\n\n```ts\nimport { middlewareActions } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### overrides\n\n`ClientMiddlewareConfig`\nconfig used during client initiation for overriding default middlewares\n\n## Returns\n\n`(client: MiddlewareClient<TTransport, TChain, TAccount>) => { middleware: ClientMiddleware }`\nmiddleware actions object\n"
  },
  "@aa-sdk/core:defaultGasEstimator": {
    "functionName": "defaultGasEstimator",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/defaultGasEstimator",
    "mdxContent": "---\n# This file is autogenerated\ntitle: defaultGasEstimator\ndescription: Overview of the defaultGasEstimator method\nslug: wallets/reference/aa-sdk/core/functions/defaultGasEstimator\n---\n\nDescription default gas estimator middleware for `SmartAccountClient`\nYou can override this middleware with your custom gas estimator middleware\nby passing it to the client constructor\n\n## Import\n\n```ts\nimport { defaultGasEstimator } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### client\n\n`MiddlewareClient`\nsmart account client instance to apply the middleware to\n\n## Returns\n\n`ClientMiddlewareFn`\nmiddleware execution function used to estimate gas for user operations\n"
  },
  "@aa-sdk/core:defaultPaymasterAndData": {
    "functionName": "defaultPaymasterAndData",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/defaultPaymasterAndData",
    "mdxContent": "---\n# This file is autogenerated\ntitle: defaultPaymasterAndData\ndescription: Overview of the defaultPaymasterAndData method\nslug: wallets/reference/aa-sdk/core/functions/defaultPaymasterAndData\n---\n\nMiddleware function that sets the `paymasterAndData` field in the given struct based on the entry point version of the account.\nThis is the default used by `createSmartAccountClient` and is not necessary to be used directly.\n\n## Import\n\n```ts\nimport { defaultPaymasterAndData } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### struct\n\n`UserOperationStruct`\nthe user operation structure to be modified\n\n### context\n\n`{ account: Account }`\nan object containing the account information\n\n## Returns\n\n`Promise<UserOperationStruct>`\na promise that resolves to the modified user operation structure\n"
  },
  "@aa-sdk/core:defaultUserOpSigner": {
    "functionName": "defaultUserOpSigner",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/defaultUserOpSigner",
    "mdxContent": "---\n# This file is autogenerated\ntitle: defaultUserOpSigner\ndescription: Overview of the defaultUserOpSigner method\nslug: wallets/reference/aa-sdk/core/functions/defaultUserOpSigner\n---\n\nProvides a default middleware function for signing user operations with a client account. This function validates the request and adds the signature to it.\nThis is already included in the client returned from `createSmartAccountClient`\n\n## Import\n\n```ts\nimport { defaultUserOpSigner } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### struct\n\n`UserOperationStruct`\nThe user operation structure to be signed\n\n### context\n\n`*`\nThe middleware context containing the client and account information\n\n### context.client\n\n`Client`\nThe client object, which should include account and chain information\n\n### context.account\n\n`Account`\nOptional, the account used for signing, defaults to the client's account if not provided\n\n## Returns\n\n`Promise<UserOperationStruct>`\nA promise that resolves to the signed user operation structure\n"
  },
  "@aa-sdk/core:noopMiddleware": {
    "functionName": "noopMiddleware",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/noopMiddleware",
    "mdxContent": "---\n# This file is autogenerated\ntitle: noopMiddleware\ndescription: Overview of the noopMiddleware method\nslug: wallets/reference/aa-sdk/core/functions/noopMiddleware\n---\n\nNoop middleware that does nothing and passes the arguments through\n\n## Import\n\n```ts\nimport { noopMiddleware } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### args\n\n`Deferrable<UserOperationStruct<TEntryPointVersion>>`\nthe client middleware arguments passed to the middleware\n\n## Returns\n\n`Promise<Deferrable<UserOperationStruct<TEntryPointVersion>>>`\nthe arguments passed to the middleware and returned as is without modification\n"
  },
  "@aa-sdk/core:TraceHeader": {
    "functionName": "TraceHeader",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/TraceHeader/withEvent",
    "mdxContent": "---\n# This file is autogenerated\ntitle: withEvent\ndescription: Overview of the withEvent method\nslug: wallets/reference/aa-sdk/core/classes/TraceHeader/withEvent\n---\n\nShould be able to create a new trace header with a new event in the trace state,\nas the key of the eventName as breadcrumbs appending onto previous breadcrumbs with the - infix if exists. And the\ntrace parent gets updated as according to the docs\n\n## Import\n\n```ts\nimport { TraceHeader } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nconst traceHeader =\n  TraceHeader.fromTraceHeader(headers) || TraceHeader.default();\nconst newTraceHeader = traceHeader.withEvent(\"newEvent\");\n```\n\n## Parameters\n\n### eventName\n\n`string`\nThe key of the new event\n\n## Returns\n\n`TraceHeader`\nThe new trace header\n"
  },
  "@aa-sdk/core:allEqual": {
    "functionName": "allEqual",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/allEqual",
    "mdxContent": "---\n# This file is autogenerated\ntitle: allEqual\ndescription: Overview of the allEqual method\nslug: wallets/reference/aa-sdk/core/functions/allEqual\n---\n\nUtility method for checking if the passed in values are all equal (strictly)\n\n## Import\n\n```ts\nimport { allEqual } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### params\n\n`...any[]`\n\n- values to check\n\n## Returns\n\n`boolean`\na boolean indicating if all values are the same\n"
  },
  "@aa-sdk/core:asyncPipe": {
    "functionName": "asyncPipe",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/asyncPipe",
    "mdxContent": "---\n# This file is autogenerated\ntitle: asyncPipe\ndescription: Overview of the asyncPipe method\nslug: wallets/reference/aa-sdk/core/functions/asyncPipe\n---\n\nUtility function that allows for piping a series of async functions together\n\n## Import\n\n```ts\nimport { asyncPipe } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### fns\n\n`((s: S, o?: O, f?: F) => Promise<S>)[]`\n\n- functions to pipe\n\n## Returns\n\n`S`\nresult of the pipe\n"
  },
  "@aa-sdk/core:deepHexlify": {
    "functionName": "deepHexlify",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/deepHexlify",
    "mdxContent": "---\n# This file is autogenerated\ntitle: deepHexlify\ndescription: Overview of the deepHexlify method\nslug: wallets/reference/aa-sdk/core/functions/deepHexlify\n---\n\nRecursively converts all values in an object to hex strings\n\n## Import\n\n```ts\nimport { deepHexlify } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### obj\n\n`any`\n\n- obj to deep hexlify\n\n## Returns\n\n`any`\nobject with all of its values hexlified\n"
  },
  "@aa-sdk/core:resolveProperties": {
    "functionName": "resolveProperties",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/resolveProperties",
    "mdxContent": "---\n# This file is autogenerated\ntitle: resolveProperties\ndescription: Overview of the resolveProperties method\nslug: wallets/reference/aa-sdk/core/functions/resolveProperties\n---\n\nAwait all of the properties of a Deferrable object\n\n## Import\n\n```ts\nimport { resolveProperties } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### object\n\n`Deferrable<T>`\n\n- a Deferrable object\n\n## Returns\n\n`Promise<T>`\nthe object with its properties resolved\n"
  },
  "@aa-sdk/core:getUserOperationError": {
    "functionName": "getUserOperationError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/getUserOperationError",
    "mdxContent": "---\n# This file is autogenerated\ntitle: getUserOperationError\ndescription: Overview of the getUserOperationError method\nslug: wallets/reference/aa-sdk/core/functions/getUserOperationError\n---\n\nRetrieves the error message from an entrypoint for a User Operation.\n\n## Import\n\n```ts\nimport { getUserOperationError } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### client\n\n`Client<TTransport, TChain, TAccount>`\nthe smart account client to use for RPC requests\n\n### request\n\n`UserOperationRequest`\nthe uo request to get the error for\n\n### entryPoint\n\n`EntryPointDef`\nthe entrypoint instance to send the uo to\n\n## Returns\n\n`string`\nthe error message from the entrypoint\n"
  },
  "@aa-sdk/core:isSmartAccountWithSigner": {
    "functionName": "isSmartAccountWithSigner",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/isSmartAccountWithSigner",
    "mdxContent": "---\n# This file is autogenerated\ntitle: isSmartAccountWithSigner\ndescription: Overview of the isSmartAccountWithSigner method\nslug: wallets/reference/aa-sdk/core/functions/isSmartAccountWithSigner\n---\n\nDetermines if the given SmartContractAccount has a signer associated with it.\n\n## Import\n\n```ts\nimport { isSmartAccountWithSigner } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { toSmartContractAccount } from \"@aa-sdk/core\";\n\nconst account = await toSmartContractAccount(...);\n\nconsole.log(isSmartAccountWithSigner(account)); // false: the base account does not have a publicly accessible signer\n```\n\n## Parameters\n\n### account\n\n`SmartContractAccount`\nThe account to check.\n\n## Returns\n\n`boolean`\ntrue if the account has a signer, otherwise false.\n"
  },
  "@aa-sdk/core:buildUserOperation": {
    "functionName": "buildUserOperation",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/buildUserOperation",
    "mdxContent": "---\n# This file is autogenerated\ntitle: buildUserOperation\ndescription: Overview of the buildUserOperation method\nslug: wallets/reference/aa-sdk/core/functions/buildUserOperation\n---\n\nBuilds a user operation using the provided client and operation parameters. Ensures that the account exists and the client is compatible.\n\n## Import\n\n```ts\nimport { buildUserOperation } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\n// smart account client is already extended with buildUserOperation\nconst client = createSmartAccountClient(...);\nconst result = await client.buildUserOperation({\nuo: {\ntarget: \"0x...\",\ndata: \"0x...\", // or \"0x\",\nvalue: 0n, // optional\n},\naccount, // only required if the client above is not connected to an account\n});\n```\n\n## Parameters\n\n### client\\_\n\n`Client<TTransport, TChain, TAccount>`\nthe client instance used to build the user operation\n\n### args\n\n`BuildUserOperationParameters<TAccount, TContext, TEntryPointVersion>`\nthe parameters required to build the user operation, including account, overrides, and context\n\n## Returns\n\n`Promise<UserOperationStruct<TEntryPointVersion>>`\na promise that resolves to a `UserOperationStruct` object containing the built user operation details\n"
  },
  "@aa-sdk/core:buildUserOperationFromTx": {
    "functionName": "buildUserOperationFromTx",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/buildUserOperationFromTx",
    "mdxContent": "---\n# This file is autogenerated\ntitle: buildUserOperationFromTx\ndescription: Overview of the buildUserOperationFromTx method\nslug: wallets/reference/aa-sdk/core/functions/buildUserOperationFromTx\n---\n\nPerforms `buildUserOperationFromTx` in batch and builds into a single, yet to be signed `UserOperation` (UO) struct. The output user operation struct will be filled with all gas fields (and paymaster data if a paymaster is used) based on the transactions data (`to`, `data`, `value`, `maxFeePerGas`, `maxPriorityFeePerGas`) computed using the configured `ClientMiddlewares` on the `SmartAccountClient`\n\n## Import\n\n```ts\nimport { buildUserOperationFromTx } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport type { RpcTransactionRequest } from \"viem\";\nimport { smartAccountClient } from \"./smartAccountClient\";\n// [!code focus:99]\n// buildUserOperationFromTx converts a traditional Ethereum transaction and returns\n// the unsigned user operation struct after constructing the user operation struct\n// through the middleware pipeline\nconst tx: RpcTransactionRequest = {\nfrom, // ignored\nto,\ndata: encodeFunctionData({\nabi: ContractABI.abi,\nfunctionName: \"func\",\nargs: [arg1, arg2, ...],\n}),\n};\nconst uoStruct = await smartAccountClient.buildUserOperationFromTx(tx);\n\n// signUserOperation signs the above unsigned user operation struct built\n// using the account connected to the smart account client\nconst request = await smartAccountClient.signUserOperation({ uoStruct });\n\n// You can use the BundlerAction `sendRawUserOperation` (packages/core/src/actions/bundler/sendRawUserOperation.ts)\n// to send the signed user operation request to the bundler, requesting the bundler to send the signed uo to the\n// EntryPoint contract pointed at by the entryPoint address parameter\nconst entryPointAddress = client.account.getEntryPoint().address;\nconst uoHash = await smartAccountClient.sendRawUserOperation({ request, entryPoint: entryPointAddress });\n```\n\n## Parameters\n\n### client\\_\n\n`Client<Transport, TChain, TAccount>`\nthe smart account client to use for RPC requests\n\n### args\n\n`SendTransactionParameters`\nthe send tx parameters\n\n### overrides\n\n`UserOperationOverrides`\noptional overrides to use for any of the fields\n\n### context\n\n`TContext`\nif the smart account client requires additinoal context for building UOs\n\n## Returns\n\n`Promise<UserOperationStruct<TEntryPointVersion>>`\na Promise containing the built user operation\n"
  },
  "@aa-sdk/core:buildUserOperationFromTxs": {
    "functionName": "buildUserOperationFromTxs",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/buildUserOperationFromTxs",
    "mdxContent": "---\n# This file is autogenerated\ntitle: buildUserOperationFromTxs\ndescription: Overview of the buildUserOperationFromTxs method\nslug: wallets/reference/aa-sdk/core/functions/buildUserOperationFromTxs\n---\n\nPerforms `buildUserOperationFromTx` in batch and builds into a single,\nyet to be signed `UserOperation` (UO) struct. The output user operation struct\nwill be filled with all gas fields (and paymaster data if a paymaster is used)\nbased on the transactions data (`to`, `data`, `value`, `maxFeePerGas`,\n`maxPriorityFeePerGas`) computed using the configured ClientMiddlewares on the SmartAccountClient.\n\n## Import\n\n```ts\nimport { buildUserOperationFromTxs } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport type { RpcTransactionRequest } from \"viem\";\nimport { smartAccountClient } from \"./smartAccountClient\";\n\nconst requests: RpcTransactionRequest[] = [\n{\nfrom, // ignored\nto,\ndata: encodeFunctionData({\n  abi: ContractABI.abi,\n  functionName: \"func\",\n  args: [arg1, arg2, ...],\n}),\n},\n{\nfrom, // ignored\nto,\ndata: encodeFunctionData({\n  abi: ContractABI.abi,\n  functionName: \"func\",\n  args: [arg1, arg2, ...],\n}),\n},\n];\nconst uoStruct = await smartAccountClient.buildUserOperationFromTxs({\nrequests,\n});\n\n// signUserOperation signs the above unsigned user operation struct built\n// using the account connected to the smart account client\nconst request = await smartAccountClient.signUserOperation({ uoStruct });\n\n// You can use the BundlerAction `sendRawUserOperation` (packages/core/src/actions/bundler/sendRawUserOperation.ts)\n// to send the signed user operation request to the bundler, requesting the bundler to send the signed uo to the\n// EntryPoint contract pointed at by the entryPoint address parameter\nconst entryPointAddress = client.account.getEntryPoint().address;\nconst uoHash = await smartAccountClient.sendRawUserOperation({\nrequest,\nentryPoint: entryPointAddress,\n});\n```\n\n## Parameters\n\n### client\\_\n\n`Client<TTransport, TChain, TAccount>`\nthe smart account client to use to make RPC calls\n\n### args\n\n`BuildTransactionParameters`\nan object containing the requests to build as well as, the account if not hoisted, the context, the overrides, and optionally a flag to enable signing of the UO via the underlying middleware\n\n## Returns\n\n`Promise<BuildUserOperationFromTransactionsResult<TEntryPointVersion>>`\na Promise containing the built user operation\n"
  },
  "@aa-sdk/core:dropAndReplaceUserOperation": {
    "functionName": "dropAndReplaceUserOperation",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/dropAndReplaceUserOperation",
    "mdxContent": "---\n# This file is autogenerated\ntitle: dropAndReplaceUserOperation\ndescription: Overview of the dropAndReplaceUserOperation method\nslug: wallets/reference/aa-sdk/core/functions/dropAndReplaceUserOperation\n---\n\nDrops an existing user operation and replaces it with a new one while ensuring the appropriate fees and overrides are applied.\n\n## Import\n\n```ts\nimport { dropAndReplaceUserOperation } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport {\ncreateSmartAccountClient,\n} from \"@aa-sdk/core\";\n\n// smart account client is already extended with dropAndReplaceUserOperation\nconst client = createSmartAccountClient(...);\nconst { request } = await client.sendUserOperation(...);\nconst result = await client.dropAndReplaceUserOperation({\nuoToDrop: request,\naccount, // only required if the client above is not connected to an account\n});\n```\n\n## Parameters\n\n### client\\_\n\n`Client<TTransport, TChain, TAccount>`\nThe client instance with the transport, chain, and account information\n\n### args\n\n`DropAndReplaceUserOperationParameters<TAccount, TContext>`\nThe parameters required for dropping and replacing the user operation including the account, operation to drop, overrides, and context\n\n## Returns\n\n`Promise<SendUserOperationResult<TEntryPointVersion>>`\nA promise that resolves to the result of sending the new user operation\n"
  },
  "@aa-sdk/core:sendTransaction": {
    "functionName": "sendTransaction",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/sendTransaction",
    "mdxContent": "---\n# This file is autogenerated\ntitle: sendTransaction\ndescription: Overview of the sendTransaction method\nslug: wallets/reference/aa-sdk/core/functions/sendTransaction\n---\n\nSends a transaction using the provided client, arguments, optional overrides, and context.\nThis sends a UO and then waits for it to be mined\n\n## Import\n\n```ts\nimport { sendTransaction } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\n// smart account client is already extended with sendTransaction\nconst client = createSmartAccountClient(...);\nconst result = await client.sendTransaction({\nto: \"0x...\",\ndata: \"0x...\", // or \"0x\",\nvalue: 0n, // optional\naccount, // only required if the client above is not connected to an account\n});\n```\n\n## Parameters\n\n### client\\_\n\n`Client<Transport, TChain, TAccount>`\nThe client to send the transaction through\n\n### args\n\n`SendTransactionParameters<TChain, TAccount, TChainOverride>`\nThe parameters required to send the transaction\n\n### overrides\n\n`UserOperationOverrides<TEntryPointVersion>`\nOptional overrides for the user operation\n\n### context\n\n`UserOperationContext`\nOptional context for the user operation\n\n## Returns\n\n`Promise<Hex>`\nA promise that resolves to a hex string representing the transaction hash\n"
  },
  "@aa-sdk/core:sendTransactions": {
    "functionName": "sendTransactions",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/sendTransactions",
    "mdxContent": "---\n# This file is autogenerated\ntitle: sendTransactions\ndescription: Overview of the sendTransactions method\nslug: wallets/reference/aa-sdk/core/functions/sendTransactions\n---\n\nSends transactions using the provided client and transaction parameters. This function builds user operations from the transactions, sends them, and waits for the transaction to be mined.\n\n## Import\n\n```ts\nimport { sendTransactions } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\n// smart account client is already extended with sendTransactions\nconst client = createSmartAccountClient(...);\nconst result = await client.sendTransactions({\nrequests: [{\nto: \"0x...\",\ndata: \"0x...\", // or \"0x\",\nvalue: 0n, // optional\n}],\naccount, // only required if the client above is not connected to an account\n});\n```\n\n## Parameters\n\n### client\\_\n\n`Client<TTransport, TChain, TAccount>`\nThe client used to send the transactions\n\n### args\n\n`SendTransactionsParameters<TAccount, TContext>`\nThe parameters for sending the transactions, including requests, overrides, account, and context\n\n## Returns\n\n`Promise<Hex>`\nA promise that resolves to the transaction hash of the sent transactions\n"
  },
  "@aa-sdk/core:sendUserOperation": {
    "functionName": "sendUserOperation",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/sendUserOperation",
    "mdxContent": "---\n# This file is autogenerated\ntitle: sendUserOperation\ndescription: Overview of the sendUserOperation method\nslug: wallets/reference/aa-sdk/core/functions/sendUserOperation\n---\n\nSends a user operation or batch of user operations using the connected account. Before executing, sendUserOperation will run the user operation through the middleware pipeline.\n\n## Import\n\n```ts\nimport { sendUserOperation } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { createSmartAccountClient, toSmartContractAccount } from \"@aa-sdk/core\";\n\nconst account = await toSmartContractAccount(...);\nconst result = await createSmartAccountClient(...).sendUserOperation({\nuo: {\ntarget: \"0x...\",\ndata: \"0x...\", // or \"0x\",\nvalue: 0n, // optional\n}\n});\n```\n\n## Parameters\n\n### client\\_\n\n`Client<TTransport, TChain, TAccount>`\nthe smart account client to use for RPC requests\n\n### args\n\n`SendUserOperationParameters<TAccount, TContext>`\ncontains the UO or batch to send, context, overrides, and account if not hoisted on the client\n\n## Returns\n\n`Promise<SendUserOperationResult<TEntryPointVersion>>`\na Promise containing the result of the user operation\n"
  },
  "@aa-sdk/core:waitForUserOperationTransaction": {
    "functionName": "waitForUserOperationTransaction",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/waitForUserOperationTransaction",
    "mdxContent": "---\n# This file is autogenerated\ntitle: waitForUserOperationTransaction\ndescription: Overview of the waitForUserOperationTransaction method\nslug: wallets/reference/aa-sdk/core/functions/waitForUserOperationTransaction\n---\n\nWaits for a user operation transaction to be confirmed by checking the receipt periodically until it is found or a maximum number of retries is reached.\n\n## Import\n\n```ts\nimport { waitForUserOperationTransaction } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n\n// smart account client is already extended with waitForUserOperationTransaction\nconst client = createSmartAccountClient(...);\nconst result = await client.waitForUserOperationTransaction({\nhash: \"0x...\",\nretries: {...} // optional param to configure the retry amounts\n});\n```\n\n## Parameters\n\n### client\\_\n\n`Client<TTransport, TChain, any>`\nThe client instance used to interact with the blockchain\n\n### args\n\n`WaitForUserOperationTxParameters`\nThe parameters for the transaction to wait for\n\n### args.hash\n\n`Hex`\nThe transaction hash to wait for\n\n### args.retries\n\n`WaitForUserOperationTxParameters[\"retries\"]`\nOptional retry parameters\n\n### args.retries.maxRetries\n\n`number`\nThe maximum number of retry attempts\n\n### args.retries.intervalMs\n\n`number`\nThe interval in milliseconds between retries\n\n### args.retries.multiplier\n\n`number`\nThe multiplier for the interval between retries\n\n## Returns\n\n`Promise<Hex>`\nA promise that resolves to the transaction hash when the transaction is confirmed\n"
  },
  "@aa-sdk/core:createBundlerClientFromExisting": {
    "functionName": "createBundlerClientFromExisting",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/createBundlerClientFromExisting",
    "mdxContent": "---\n# This file is autogenerated\ntitle: createBundlerClientFromExisting\ndescription: Overview of the createBundlerClientFromExisting method\nslug: wallets/reference/aa-sdk/core/functions/createBundlerClientFromExisting\n---\n\nCreates a bundler client from an existing public client with the provided transport and chain.\n\n## Import\n\n```ts\nimport { createBundlerClientFromExisting } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { createPublicClient } from \"viem\";\nimport { createBundlerClientFromExisting } from \"@aa-sdk/core\";\n\nconst publicClient = createPublicClient(...);\nconst bundlerClient = createBundlerClientFromExisting(publicClient);\n```\n\n## Parameters\n\n### client\n\n`PublicClient<T, Chain>`\nThe existing public client to be extended with bundler actions\n\n## Returns\n\n`BundlerClient<T>`\nA bundler client that extends the functionality of the provided public client\n"
  },
  "@aa-sdk/core:createSmartAccountClient": {
    "functionName": "createSmartAccountClient",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/createSmartAccountClient",
    "mdxContent": "---\n# This file is autogenerated\ntitle: createSmartAccountClient\ndescription: Overview of the createSmartAccountClient method\nslug: wallets/reference/aa-sdk/core/functions/createSmartAccountClient\n---\n\nCreates a smart account client using the provided configuration. This client handles various Ethereum transactions and message signing operations.\n\n## Import\n\n```ts\nimport { createSmartAccountClient } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { createSmartAccountClient, toSmartContractAccount } from \"@aa-sdk/core\";\nimport { http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst client = createSmartAccountClient({\nchain: sepolia,\ntransport: http(\"RPC_URL\"),\n// optionally hoist the account\naccount: toSmartContractAccount(...),\n});\n```\n\n## Parameters\n\n### config\n\n`SmartAccountClientConfig`\nThe configuration for creating the smart account client\n\n## Returns\n\n`SmartAccountClient`\nA smart account client capable of handling transactions, message signing, and other operations on a smart account\n"
  },
  "@aa-sdk/core:createSmartAccountClientFromExisting": {
    "functionName": "createSmartAccountClientFromExisting",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/createSmartAccountClientFromExisting",
    "mdxContent": "---\n# This file is autogenerated\ntitle: createSmartAccountClientFromExisting\ndescription: Overview of the createSmartAccountClientFromExisting method\nslug: wallets/reference/aa-sdk/core/functions/createSmartAccountClientFromExisting\n---\n\nCreates a smart account client using an existing client and specific configuration. This function can be used to reuse a pre-existing BundlerClient while customizing other aspects of the smart account.\n\n## Import\n\n```ts\nimport { createSmartAccountClientFromExisting } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport {\ncreateBundlerClient,\ncreateSmartAccountClientFromExisting,\ntoSmartContractAccount\n} from \"@aa-sdk/core\";\n\nconst bundlerClient = createBundlerClient(...);\nconst client = createSmartAccountClientFromExisting({\nclient,\naccount: toSmartContractAccount(...),\n})\n```\n\n## Parameters\n\n### config\n\n`Omit<SmartAccountClientConfig, \"transport\" | \"chain\"> & {client: BundlerClient}`\nthe configuration object which includes the client\n\n## Returns\n\n`SmartAccountClient`\nA smart account client created from the existing BundlerClient\n"
  },
  "@aa-sdk/core:defaultFeeEstimator": {
    "functionName": "defaultFeeEstimator",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/defaultFeeEstimator",
    "mdxContent": "---\n# This file is autogenerated\ntitle: defaultFeeEstimator\ndescription: Overview of the defaultFeeEstimator method\nslug: wallets/reference/aa-sdk/core/functions/defaultFeeEstimator\n---\n\nDefault fee estimator middleware function that estimates the maximum fee per gas and maximum priority fee per gas for a given client and applies the necessary overrides and fee options.\n\n## Import\n\n```ts\nimport { defaultFeeEstimator } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { createSmartAccountClient, defaultFeeEstimator, createBundlerClient } from \"@aa-sdk/core\";\n\nconst bundlerClient = createBundlerClient(...);\n\n// NOTE: this is already provided by the smart account client\nconst client = createSmartAccountClient({\nfeeEstimator: defaultFeeEstimator(bundlerClient),\n...otherParams\n});\n```\n\n## Parameters\n\n### client\n\n`C`\nThe client to perform the fee estimation\n\n## Returns\n\n`ClientMiddlewareFn`\nA middleware function that takes in the struct and options, estimates the fees, and updates the struct with the estimated fees\n"
  },
  "@aa-sdk/core:isSigner": {
    "functionName": "isSigner",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/isSigner",
    "mdxContent": "---\n# This file is autogenerated\ntitle: isSigner\ndescription: Overview of the isSigner method\nslug: wallets/reference/aa-sdk/core/functions/isSigner\n---\n\nChecks if the provided object is a `SmartAccountSigner`.\n\n## Import\n\n```ts\nimport { isSigner } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { isSigner, LocalAccountSigner } from \"@aa-sdk/core\";\n\nconst signer = new LocalAccountSigner(...);\nconsole.log(isSigner(signer)); // true\n```\n\n## Parameters\n\n### signer\n\n`any`\nthe object to check\n\n## Returns\n\n`boolean`\nA boolean indicating whether the object is a `SmartAccountSigner`\n"
  },
  "@aa-sdk/core:AccountNotFoundError": {
    "functionName": "AccountNotFoundError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/AccountNotFoundError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: AccountNotFoundError\ndescription: Overview of the AccountNotFoundError method\nslug: wallets/reference/aa-sdk/core/classes/AccountNotFoundError/constructor\n---\n\nConstructor for initializing an error message indicating that an account could not be found to execute the specified action.\n\n<Note>\n  `AccountNotFoundError` extends `BaseError`, see the docs for BaseError for all\n  supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { AccountNotFoundError } from \"@aa-sdk/core\";\n```\n"
  },
  "@aa-sdk/core:NotAModularAccountV2Error": {
    "functionName": "NotAModularAccountV2Error",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/NotAModularAccountV2Error/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: NotAModularAccountV2Error\ndescription: Overview of the NotAModularAccountV2Error method\nslug: wallets/reference/aa-sdk/core/classes/NotAModularAccountV2Error/constructor\n---\n\nConstructor for initializing an error message indicating that the account is not a Modular Account V2.\n\n<Note>\n  `NotAModularAccountV2Error` extends `BaseError`, see the docs for BaseError\n  for all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { NotAModularAccountV2Error } from \"@aa-sdk/core\";\n```\n"
  },
  "@aa-sdk/core:AccountRequiresOwnerError": {
    "functionName": "AccountRequiresOwnerError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/AccountRequiresOwnerError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: AccountRequiresOwnerError\ndescription: Overview of the AccountRequiresOwnerError method\nslug: wallets/reference/aa-sdk/core/classes/AccountRequiresOwnerError/constructor\n---\n\nConstructs an error indicating that an account of the specified type requires an owner to execute.\n\n<Note>\n  `AccountRequiresOwnerError` extends `BaseError`, see the docs for BaseError\n  for all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { AccountRequiresOwnerError } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### accountType\n\n`string`\nThe type of account that requires an owner\n"
  },
  "@aa-sdk/core:BatchExecutionNotSupportedError": {
    "functionName": "BatchExecutionNotSupportedError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/BatchExecutionNotSupportedError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: BatchExecutionNotSupportedError\ndescription: Overview of the BatchExecutionNotSupportedError method\nslug: wallets/reference/aa-sdk/core/classes/BatchExecutionNotSupportedError/constructor\n---\n\nConstructs an error message indicating that batch execution is not supported by the specified account type.\n\n<Note>\n  `BatchExecutionNotSupportedError` extends `BaseError`, see the docs for\n  BaseError for all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { BatchExecutionNotSupportedError } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### accountType\n\n`string`\nthe type of account that does not support batch execution\n"
  },
  "@aa-sdk/core:DefaultFactoryNotDefinedError": {
    "functionName": "DefaultFactoryNotDefinedError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/DefaultFactoryNotDefinedError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: DefaultFactoryNotDefinedError\ndescription: Overview of the DefaultFactoryNotDefinedError method\nslug: wallets/reference/aa-sdk/core/classes/DefaultFactoryNotDefinedError/constructor\n---\n\nConstructs an error message indicating that no default factory was found for the given account type, chain, and entry point version.\n\n<Note>\n  `DefaultFactoryNotDefinedError` extends `BaseError`, see the docs for\n  BaseError for all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { DefaultFactoryNotDefinedError } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### accountType\n\n`string`\nthe type of account\n\n### chain\n\n`Chain`\nthe blockchain chain\n\n### version\n\n`EntryPointVersion`\nthe entry point version\n"
  },
  "@aa-sdk/core:FailedToGetStorageSlotError": {
    "functionName": "FailedToGetStorageSlotError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/FailedToGetStorageSlotError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: FailedToGetStorageSlotError\ndescription: Overview of the FailedToGetStorageSlotError method\nslug: wallets/reference/aa-sdk/core/classes/FailedToGetStorageSlotError/constructor\n---\n\nCustom error message constructor for failing to get a specific storage slot.\n\n<Note>\n  `FailedToGetStorageSlotError` extends `BaseError`, see the docs for BaseError\n  for all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { FailedToGetStorageSlotError } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### slot\n\n`string`\nThe storage slot that failed to be accessed or retrieved\n\n### slotDescriptor\n\n`string`\nA description of the storage slot, for additional context in the error message\n"
  },
  "@aa-sdk/core:GetCounterFactualAddressError": {
    "functionName": "GetCounterFactualAddressError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/GetCounterFactualAddressError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: GetCounterFactualAddressError\ndescription: Overview of the GetCounterFactualAddressError method\nslug: wallets/reference/aa-sdk/core/classes/GetCounterFactualAddressError/constructor\n---\n\nConstructor for initializing an error message indicating the failure of fetching the counter-factual address.\n\n<Note>\n  `GetCounterFactualAddressError` extends `BaseError`, see the docs for\n  BaseError for all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { GetCounterFactualAddressError } from \"@aa-sdk/core\";\n```\n"
  },
  "@aa-sdk/core:IncorrectAccountType": {
    "functionName": "IncorrectAccountType",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/IncorrectAccountType/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: IncorrectAccountType\ndescription: Overview of the IncorrectAccountType method\nslug: wallets/reference/aa-sdk/core/classes/IncorrectAccountType/constructor\n---\n\nConstructs an error object indicating that the expected account type does not match the actual account type.\n\n<Note>\n  `IncorrectAccountType` extends `BaseError`, see the docs for BaseError for all\n  supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { IncorrectAccountType } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### expected\n\n`string`\nthe expected account type\n\n### actual\n\n`string`\nthe actual account type that was received\n"
  },
  "@aa-sdk/core:SignTransactionNotSupportedError": {
    "functionName": "SignTransactionNotSupportedError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/SignTransactionNotSupportedError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: SignTransactionNotSupportedError\ndescription: Overview of the SignTransactionNotSupportedError method\nslug: wallets/reference/aa-sdk/core/classes/SignTransactionNotSupportedError/constructor\n---\n\nThrows an error indicating that signing a transaction is not supported by smart contracts.\n\n<Note>\n  `SignTransactionNotSupportedError` extends `BaseError`, see the docs for\n  BaseError for all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { SignTransactionNotSupportedError } from \"@aa-sdk/core\";\n```\n"
  },
  "@aa-sdk/core:SmartAccountWithSignerRequiredError": {
    "functionName": "SmartAccountWithSignerRequiredError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/SmartAccountWithSignerRequiredError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: SmartAccountWithSignerRequiredError\ndescription: Overview of the SmartAccountWithSignerRequiredError method\nslug: wallets/reference/aa-sdk/core/classes/SmartAccountWithSignerRequiredError/constructor\n---\n\nInitializes a new instance of the error class with a predefined error message indicating that a smart account requires a signer.\n\n<Note>\n  `SmartAccountWithSignerRequiredError` extends `BaseError`, see the docs for\n  BaseError for all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { SmartAccountWithSignerRequiredError } from \"@aa-sdk/core\";\n```\n"
  },
  "@aa-sdk/core:UpgradeToAndCallNotSupportedError": {
    "functionName": "UpgradeToAndCallNotSupportedError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/UpgradeToAndCallNotSupportedError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: UpgradeToAndCallNotSupportedError\ndescription: Overview of the UpgradeToAndCallNotSupportedError method\nslug: wallets/reference/aa-sdk/core/classes/UpgradeToAndCallNotSupportedError/constructor\n---\n\nConstructs an error message indicating that `UpgradeToAndCall` is not supported by the specified account type.\n\n<Note>\n  `UpgradeToAndCallNotSupportedError` extends `BaseError`, see the docs for\n  BaseError for all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { UpgradeToAndCallNotSupportedError } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### accountType\n\n`string`\nThe type of account that does not support `UpgradeToAndCall`\n"
  },
  "@aa-sdk/core:UpgradesNotSupportedError": {
    "functionName": "UpgradesNotSupportedError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/UpgradesNotSupportedError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: UpgradesNotSupportedError\ndescription: Overview of the UpgradesNotSupportedError method\nslug: wallets/reference/aa-sdk/core/classes/UpgradesNotSupportedError/constructor\n---\n\nError constructor for indicating that upgrades are not supported by the given account type.\n\n<Note>\n  `UpgradesNotSupportedError` extends `BaseError`, see the docs for BaseError\n  for all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { UpgradesNotSupportedError } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### accountType\n\n`string`\nThe type of account that does not support upgrades\n"
  },
  "@aa-sdk/core:ChainNotFoundError": {
    "functionName": "ChainNotFoundError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/ChainNotFoundError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: ChainNotFoundError\ndescription: Overview of the ChainNotFoundError method\nslug: wallets/reference/aa-sdk/core/classes/ChainNotFoundError/constructor\n---\n\nInitializes a new instance of the error message with a default message indicating that no chain was supplied to the client.\n\n<Note>\n  `ChainNotFoundError` extends `BaseError`, see the docs for BaseError for all\n  supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { ChainNotFoundError } from \"@aa-sdk/core\";\n```\n"
  },
  "@aa-sdk/core:IncompatibleClientError": {
    "functionName": "IncompatibleClientError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/IncompatibleClientError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: IncompatibleClientError\ndescription: Overview of the IncompatibleClientError method\nslug: wallets/reference/aa-sdk/core/classes/IncompatibleClientError/constructor\n---\n\nThrows an error when the client type does not match the expected client type.\n\n<Note>\n  `IncompatibleClientError` extends `BaseError`, see the docs for BaseError for\n  all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { IncompatibleClientError } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### expectedClient\n\n`string`\nThe expected type of the client.\n\n### method\n\n`string`\nThe method that was called.\n\n### client\n\n`Client`\nThe client instance.\n"
  },
  "@aa-sdk/core:InvalidRpcUrlError": {
    "functionName": "InvalidRpcUrlError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/InvalidRpcUrlError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: InvalidRpcUrlError\ndescription: Overview of the InvalidRpcUrlError method\nslug: wallets/reference/aa-sdk/core/classes/InvalidRpcUrlError/constructor\n---\n\nCreates an instance of an error with a message indicating an invalid RPC URL.\n\n<Note>\n  `InvalidRpcUrlError` extends `BaseError`, see the docs for BaseError for all\n  supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { InvalidRpcUrlError } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### rpcUrl\n\n`string`\nThe invalid RPC URL that caused the error\n"
  },
  "@aa-sdk/core:InvalidEntityIdError": {
    "functionName": "InvalidEntityIdError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/InvalidEntityIdError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: InvalidEntityIdError\ndescription: Overview of the InvalidEntityIdError method\nslug: wallets/reference/aa-sdk/core/classes/InvalidEntityIdError/constructor\n---\n\nInitializes a new instance of the error message with a default message indicating that the entity id is invalid because it's too large.\n\n<Note>\n  `InvalidEntityIdError` extends `BaseError`, see the docs for BaseError for all\n  supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { InvalidEntityIdError } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### entityId\n\n`number`\nthe invalid entityId used\n"
  },
  "@aa-sdk/core:InvalidNonceKeyError": {
    "functionName": "InvalidNonceKeyError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/InvalidNonceKeyError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: InvalidNonceKeyError\ndescription: Overview of the InvalidNonceKeyError method\nslug: wallets/reference/aa-sdk/core/classes/InvalidNonceKeyError/constructor\n---\n\nInitializes a new instance of the error message with a default message indicating that the nonce key is invalid.\n\n<Note>\n  `InvalidNonceKeyError` extends `BaseError`, see the docs for BaseError for all\n  supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { InvalidNonceKeyError } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### nonceKey\n\n`bigint`\nthe invalid nonceKey used\n"
  },
  "@aa-sdk/core:EntityIdOverrideError": {
    "functionName": "EntityIdOverrideError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/EntityIdOverrideError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: EntityIdOverrideError\ndescription: Overview of the EntityIdOverrideError method\nslug: wallets/reference/aa-sdk/core/classes/EntityIdOverrideError/constructor\n---\n\nInitializes a new instance of the error message with a default message indicating that the nonce key is invalid.\n\n<Note>\n  `EntityIdOverrideError` extends `BaseError`, see the docs for BaseError for\n  all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { EntityIdOverrideError } from \"@aa-sdk/core\";\n```\n"
  },
  "@aa-sdk/core:InvalidModularAccountV2Mode": {
    "functionName": "InvalidModularAccountV2Mode",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/InvalidModularAccountV2Mode/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: InvalidModularAccountV2Mode\ndescription: Overview of the InvalidModularAccountV2Mode method\nslug: wallets/reference/aa-sdk/core/classes/InvalidModularAccountV2Mode/constructor\n---\n\nInitializes a new instance of the error message with a default message indicating that the provided ma v2 account mode is invalid.\n\n<Note>\n  `InvalidModularAccountV2Mode` extends `BaseError`, see the docs for BaseError\n  for all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { InvalidModularAccountV2Mode } from \"@aa-sdk/core\";\n```\n"
  },
  "@aa-sdk/core:InvalidDeferredActionNonce": {
    "functionName": "InvalidDeferredActionNonce",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/InvalidDeferredActionNonce/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: InvalidDeferredActionNonce\ndescription: Overview of the InvalidDeferredActionNonce method\nslug: wallets/reference/aa-sdk/core/classes/InvalidDeferredActionNonce/constructor\n---\n\nInitializes a new instance of the error message with a default message indicating that the provided deferred action nonce is invalid.\n\n<Note>\n  `InvalidDeferredActionNonce` extends `BaseError`, see the docs for BaseError\n  for all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { InvalidDeferredActionNonce } from \"@aa-sdk/core\";\n```\n"
  },
  "@aa-sdk/core:EntryPointNotFoundError": {
    "functionName": "EntryPointNotFoundError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/EntryPointNotFoundError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: EntryPointNotFoundError\ndescription: Overview of the EntryPointNotFoundError method\nslug: wallets/reference/aa-sdk/core/classes/EntryPointNotFoundError/constructor\n---\n\nConstructs an error message indicating that no default entry point exists for the given chain and entry point version.\n\n<Note>\n  `EntryPointNotFoundError` extends `BaseError`, see the docs for BaseError for\n  all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { EntryPointNotFoundError } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### chain\n\n`Chain`\nThe blockchain network for which the entry point is being queried\n\n### entryPointVersion\n\n`any`\nThe version of the entry point for which no default exists\n"
  },
  "@aa-sdk/core:InvalidEntryPointError": {
    "functionName": "InvalidEntryPointError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/InvalidEntryPointError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: InvalidEntryPointError\ndescription: Overview of the InvalidEntryPointError method\nslug: wallets/reference/aa-sdk/core/classes/InvalidEntryPointError/constructor\n---\n\nConstructs an error indicating an invalid entry point version for a specific chain.\n\n<Note>\n  `InvalidEntryPointError` extends `BaseError`, see the docs for BaseError for\n  all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { InvalidEntryPointError } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### chain\n\n`Chain`\nThe chain object containing information about the blockchain\n\n### entryPointVersion\n\n`any`\nThe entry point version that is invalid\n"
  },
  "@aa-sdk/core:InvalidSignerTypeError": {
    "functionName": "InvalidSignerTypeError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/InvalidSignerTypeError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: InvalidSignerTypeError\ndescription: Overview of the InvalidSignerTypeError method\nslug: wallets/reference/aa-sdk/core/classes/InvalidSignerTypeError/constructor\n---\n\nConstructs an error message when an invalid signer type is passed to SmartAccountSigner.\n\n<Note>\n  `InvalidSignerTypeError` extends `BaseError`, see the docs for BaseError for\n  all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { InvalidSignerTypeError } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### signerType\n\n`string`\nAn optional parameter specifying the signer type. If not provided, a default error message will be used.\n"
  },
  "@aa-sdk/core:FailedToFindTransactionError": {
    "functionName": "FailedToFindTransactionError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/FailedToFindTransactionError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: FailedToFindTransactionError\ndescription: Overview of the FailedToFindTransactionError method\nslug: wallets/reference/aa-sdk/core/classes/FailedToFindTransactionError/constructor\n---\n\nConstructs a new error message indicating a failure to find the transaction for the specified user operation hash.\n\n<Note>\n  `FailedToFindTransactionError` extends `BaseError`, see the docs for BaseError\n  for all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { FailedToFindTransactionError } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### hash\n\n`Hex`\nThe hexadecimal value representing the user operation hash.\n"
  },
  "@aa-sdk/core:TransactionMissingToParamError": {
    "functionName": "TransactionMissingToParamError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/TransactionMissingToParamError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: TransactionMissingToParamError\ndescription: Overview of the TransactionMissingToParamError method\nslug: wallets/reference/aa-sdk/core/classes/TransactionMissingToParamError/constructor\n---\n\nThrows an error indicating that a transaction is missing the `to` address in the request.\n\n<Note>\n  `TransactionMissingToParamError` extends `BaseError`, see the docs for\n  BaseError for all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { TransactionMissingToParamError } from \"@aa-sdk/core\";\n```\n"
  },
  "@aa-sdk/core:InvalidUserOperationError": {
    "functionName": "InvalidUserOperationError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/InvalidUserOperationError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: InvalidUserOperationError\ndescription: Overview of the InvalidUserOperationError method\nslug: wallets/reference/aa-sdk/core/classes/InvalidUserOperationError/constructor\n---\n\nCreates an instance of InvalidUserOperationError.\n\nInvalidUserOperationError constructor\n\n<Note>\n  `InvalidUserOperationError` extends `BaseError`, see the docs for BaseError\n  for all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { InvalidUserOperationError } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### uo\n\n`UserOperationStruct`\nthe invalid user operation struct\n"
  },
  "@aa-sdk/core:WaitForUserOperationError": {
    "functionName": "WaitForUserOperationError",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/WaitForUserOperationError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: WaitForUserOperationError\ndescription: Overview of the WaitForUserOperationError method\nslug: wallets/reference/aa-sdk/core/classes/WaitForUserOperationError/constructor\n---\n\nundefined\n\n<Note>\n  `WaitForUserOperationError` extends `BaseError`, see the docs for BaseError\n  for all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { WaitForUserOperationError } from \"@aa-sdk/core\";\n```\n\n## Parameters\n\n### request\n\n`UserOperationRequest`\nthe user operation request that failed\n\n### error\n\n`Error`\nthe underlying error that caused the failure\n"
  },
  "@aa-sdk/core:getAccountAddress": {
    "functionName": "getAccountAddress",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/getAccountAddress",
    "mdxContent": "---\n# This file is autogenerated\ntitle: getAccountAddress\ndescription: Overview of the getAccountAddress method\nslug: wallets/reference/aa-sdk/core/functions/getAccountAddress\n---\n\nRetrieves the account address. Uses a provided `accountAddress` if available; otherwise, it computes the address using the entry point contract and the initial code.\n\n## Import\n\n```ts\nimport { getAccountAddress } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { getEntryPoint, getAccountAddress } from \"@aa-sdk/core\";\n\nconst accountAddress = await getAccountAddress({\n  client,\n  entryPoint: getEntryPoint(chain),\n  getAccountInitCode: async () => \"0x{factoryAddress}{factoryCallData}\",\n});\n```\n\n## Parameters\n\n### params\n\n`GetAccountAddressParams`\nThe configuration object\n\n### params.client\n\n`PublicClient`\nA public client instance to interact with the blockchain\n\n### params.entryPoint\n\n`EntryPointDef`\nThe entry point definition which includes the address and ABI\n\n### params.accountAddress\n\n`Address`\nOptional existing account address\n\n### params.getAccountInitCode\n\n`() => Promise<Hex>`\nA function that returns a Promise resolving to a Hex string representing the initial code of the account\n\n## Returns\n\n`Promise<Address>`\nA promise that resolves to the account address\n"
  },
  "@aa-sdk/core:parseFactoryAddressFromAccountInitCode": {
    "functionName": "parseFactoryAddressFromAccountInitCode",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/parseFactoryAddressFromAccountInitCode",
    "mdxContent": "---\n# This file is autogenerated\ntitle: parseFactoryAddressFromAccountInitCode\ndescription: Overview of the parseFactoryAddressFromAccountInitCode method\nslug: wallets/reference/aa-sdk/core/functions/parseFactoryAddressFromAccountInitCode\n---\n\nParses the factory address and factory calldata from the provided account initialization code (initCode).\n\n## Import\n\n```ts\nimport { parseFactoryAddressFromAccountInitCode } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { parseFactoryAddressFromAccountInitCode } from \"@aa-sdk/core\";\n\nconst [address, calldata] =\n  parseFactoryAddressFromAccountInitCode(\"0xAddressCalldata\");\n```\n\n## Parameters\n\n### initCode\n\n`Hex`\nThe initialization code from which to parse the factory address and calldata\n\n## Returns\n\n`[Address, Hex]`\nA tuple containing the parsed factory address and factory calldata\n"
  },
  "@aa-sdk/core:toSmartContractAccount": {
    "functionName": "toSmartContractAccount",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/toSmartContractAccount",
    "mdxContent": "---\n# This file is autogenerated\ntitle: toSmartContractAccount\ndescription: Overview of the toSmartContractAccount method\nslug: wallets/reference/aa-sdk/core/functions/toSmartContractAccount\n---\n\nConverts an account to a smart contract account and sets up various account-related methods using the provided parameters like transport, chain, entry point, and other utilities.\n\n## Import\n\n```ts\nimport { toSmartContractAccount } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { http, type SignableMessage } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst myAccount = await toSmartContractAccount({\n  /// REQUIRED PARAMS ///\n  source: \"MyAccount\",\n  transport: http(\"RPC_URL\"),\n  chain: sepolia,\n  // The EntryPointDef that your account is com\"patible with\n  entryPoint: getEntryPoint(sepolia, { version: \"0.6.0\" }),\n  // This should return a concatenation of your `factoryAddress` and the `callData` for your factory's create account method\n  getAccountInitCode: async () => \"0x{factoryAddress}{callData}\",\n  // an invalid signature that doesn't cause your account to revert during validation\n  getDummySignature: () => \"0x1234...\",\n  // given a UO in the form of {target, data, value} should output the calldata for calling your contract's execution method\n  encodeExecute: async (uo) => \"0xcalldata\",\n  signMessage: async ({ message }: { message: SignableMessage }) => \"0x...\",\n  signTypedData: async (typedData) => \"0x000\",\n\n  /// OPTIONAL PARAMS ///\n  // if you already know your account's address, pass that in here to avoid generating a new counterfactual\n  accountAddress: \"0xaddressoverride\",\n  // if your account supports batching, this should take an array of UOs and return the calldata for calling your contract's batchExecute method\n  encodeBatchExecute: async (uos) => \"0x...\",\n  // if your contract expects a different signing scheme than the default signMessage scheme, you can override that here\n  signUserOperationHash: async (hash) => \"0x...\",\n  // allows you to define the calldata for upgrading your account\n  encodeUpgradeToAndCall: async (params) => \"0x...\",\n});\n```\n\n## Parameters\n\n### params\n\n`ToSmartContractAccountParams`\nthe parameters required for converting to a smart contract account\n\n### params.transport\n\n`Transport`\nthe transport mechanism used for communication\n\n### params.chain\n\n`Chain`\nthe blockchain chain used in the account\n\n### params.entryPoint\n\n`EntryPoint`\nthe entry point of the smart contract\n\n### params.source\n\n`string`\nthe source identifier for the account\n\n### params.accountAddress\n\n`Address`\nthe address of the account\n\n### params.getAccountInitCode\n\n`() => Promise<Hex>`\na function to get the initial state code of the account\n\n### params.signMessage\n\n`(message: { message: SignableMessage }) => Promise<Hex>`\na function to sign a message\n\n### params.signTypedData\n\n`(typedDataDefinition: TypedDataDefinition<typedData, primaryType>) => Promise<Hex>`\na function to sign typed data\n\n### params.encodeBatchExecute\n\n`(transactions: Transaction[]) => Hex`\na function to encode batch transactions\n\n### params.encodeExecute\n\n`(tx: Transaction) => Hex`\na function to encode a single transaction\n\n### params.getDummySignature\n\n`() => Promise<Hex>`\na function to get a dummy signature\n\n### params.signUserOperationHash\n\n`(uoHash: Hex) => Promise<Hex>`\na function to sign user operations\n\n### params.encodeUpgradeToAndCall\n\n`(implementationAddress: Address, implementationCallData: Hex) => Hex`\na function to encode upgrade call\n\n## Returns\n\n`Promise<SmartContractAccount>`\na promise that resolves to a SmartContractAccount object with methods and properties for interacting with the smart contract account\n"
  },
  "@aa-sdk/core:checkGasSponsorshipEligibility": {
    "functionName": "checkGasSponsorshipEligibility",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/checkGasSponsorshipEligibility",
    "mdxContent": "---\n# This file is autogenerated\ntitle: checkGasSponsorshipEligibility\ndescription: Overview of the checkGasSponsorshipEligibility method\nslug: wallets/reference/aa-sdk/core/functions/checkGasSponsorshipEligibility\n---\n\nThis function verifies the eligibility of the connected account for gas sponsorship concerning the upcoming `UserOperation` (UO) that is intended to be sent.\nInternally, this method invokes `buildUserOperation`, which navigates through the middleware pipeline, including the `PaymasterMiddleware`. Its purpose is to construct the UO struct meant for transmission to the bundler. Following the construction of the UO struct, this function verifies if the resulting structure contains a non-empty `paymasterAndData` field.\nYou can utilize this method before sending the user operation to confirm its eligibility for gas sponsorship. Depending on the outcome, it allows you to tailor the user experience accordingly, based on eligibility.\n\n## Import\n\n```ts\nimport { checkGasSponsorshipEligibility } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { smartAccountClient } from \"./smartAccountClient\";\n// [!code focus:99]\nconst { eligible } = await smartAccountClient.checkGasSponsorshipEligibility({\n  uo: {\n    data: \"0xCalldata\",\n    target: \"0xTarget\",\n    value: 0n,\n  },\n});\n\nconsole.log(\n  `User Operation is ${\n    eligible ? \"eligible\" : \"ineligible\"\n  } for gas sponsorship.`,\n);\n```\n\n## Parameters\n\n### client\\_\n\n`Client<TTransport, TChain, TAccount>`\nthe smart account client to use for making RPC calls\n\n### args\n\n`SendUserOperationParameters`\ncontaining the user operation, account, context, and overrides\n\n## Returns\n\n`Promise<CheckGasSponsorshipEligibilityResult<TAccount>>`\na Promise containing a boolean indicating if the account is elgibile for sponsorship and the sponsored UO\n"
  },
  "@aa-sdk/core:createBundlerClient": {
    "functionName": "createBundlerClient",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/createBundlerClient",
    "mdxContent": "---\n# This file is autogenerated\ntitle: createBundlerClient\ndescription: Overview of the createBundlerClient method\nslug: wallets/reference/aa-sdk/core/functions/createBundlerClient\n---\n\nCreates a Bundler Client using the provided configuration parameters, including chain and optional type.\n\n## Import\n\n```ts\nimport { createBundlerClient } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { createBundlerClient } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\n\nconst client = createBundlerClient({\n  chain: sepolia,\n  transport: http(\"RPC_URL\"),\n});\n```\n\n## Parameters\n\n### args\n\n`PublicClientConfig & { type?: string }`\nConfiguration for creating the Bundler Client, including parameters for the chain, transport, and optional type\n\n## Returns\n\n`BundlerClient`\nThe created Bundler Client with extended public and bundler actions\n"
  },
  "@aa-sdk/core:convertChainIdToCoinType": {
    "functionName": "convertChainIdToCoinType",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/convertChainIdToCoinType",
    "mdxContent": "---\n# This file is autogenerated\ntitle: convertChainIdToCoinType\ndescription: Overview of the convertChainIdToCoinType method\nslug: wallets/reference/aa-sdk/core/functions/convertChainIdToCoinType\n---\n\nConverts a given chain ID to a coin type, following specific standards for mainnet and non-mainnet chains.\n\n## Import\n\n```ts\nimport { convertChainIdToCoinType } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { convertChainIdToCoinType } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\n\nconst coinType = convertChainIdToCoinType(sepolia.id);\n```\n\n## Parameters\n\n### chainId\n\n`number`\nthe blockchain chain ID that you want to convert to a coin type\n\n## Returns\n\n`number`\nthe corresponding coin type for the given chain ID\n"
  },
  "@aa-sdk/core:convertCoinTypeToChain": {
    "functionName": "convertCoinTypeToChain",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/convertCoinTypeToChain",
    "mdxContent": "---\n# This file is autogenerated\ntitle: convertCoinTypeToChain\ndescription: Overview of the convertCoinTypeToChain method\nslug: wallets/reference/aa-sdk/core/functions/convertCoinTypeToChain\n---\n\nConverts a coin type to its corresponding blockchain chain based on a predefined mapping.\n\n## Import\n\n```ts\nimport { convertCoinTypeToChain } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { convertChainIdToCoinType, convertCoinTypeToChain } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\n\nconst coinType = convertChainIdToCoinType(sepolia.id);\nconst chain = convertCoinTypeToChain(coinType);\n```\n\n## Parameters\n\n### coinType\n\n`number`\nThe numerical identifier for the coin type\n\n## Returns\n\n`Chain`\nThe corresponding blockchain chain\n"
  },
  "@aa-sdk/core:convertCoinTypeToChainId": {
    "functionName": "convertCoinTypeToChainId",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/convertCoinTypeToChainId",
    "mdxContent": "---\n# This file is autogenerated\ntitle: convertCoinTypeToChainId\ndescription: Overview of the convertCoinTypeToChainId method\nslug: wallets/reference/aa-sdk/core/functions/convertCoinTypeToChainId\n---\n\nConverts a coin type to a chain ID based on predefined mappings. This function follows ENSIP-9 for coin type 60 and ENSIP-11 for other coin types.\n\n## Import\n\n```ts\nimport { convertCoinTypeToChainId } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport {\n  convertChainIdToCoinType,\n  convertCoinTypeToChainId,\n} from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\n\nconst coinType = convertChainIdToCoinType(sepolia.id);\nconst chainId = convertCoinTypeToChainId(coinType);\n```\n\n## Parameters\n\n### coinType\n\n`number`\nthe coin type to be converted to a chain ID\n\n## Returns\n\n`number`\nthe corresponding chain ID\n"
  },
  "@aa-sdk/core:getEntryPoint": {
    "functionName": "getEntryPoint",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/getEntryPoint",
    "mdxContent": "---\n# This file is autogenerated\ntitle: getEntryPoint\ndescription: Overview of the getEntryPoint method\nslug: wallets/reference/aa-sdk/core/functions/getEntryPoint\n---\n\nRetrieves the entry point definition for the specified chain and version, falling back to the default version if not provided. Throws an error if the entry point address cannot be found.\n\n## Import\n\n```ts\nimport { getEntryPoint } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { getEntryPoint } from \"@aa-sdk/core\";\nimport { sepolia } from \"viem/chains\";\n\nconst entryPoint060 = getEntryPoint(sepolia);\nconst entryPoint070 = getEntryPoint(sepolia, { version: \"0.7.0\" });\n```\n\n## Parameters\n\n### chain\n\n`Chain`\nThe chain for which the entry point is being retrieved\n\n### options\n\n`GetEntryPointOptions<TEntryPointVersion>`\nOptions containing the version and address overrides for the entry point\n\n## Returns\n\n`EntryPointDefRegistry<TChain>[EntryPointVersion]`\nThe entry point definition for the specified chain and version\n"
  },
  "@aa-sdk/core:isEntryPointVersion": {
    "functionName": "isEntryPointVersion",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/isEntryPointVersion",
    "mdxContent": "---\n# This file is autogenerated\ntitle: isEntryPointVersion\ndescription: Overview of the isEntryPointVersion method\nslug: wallets/reference/aa-sdk/core/functions/isEntryPointVersion\n---\n\nChecks if the given value is a valid key of the EntryPointRegistry.\n\n## Import\n\n```ts\nimport { isEntryPointVersion } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { isEntryPointVersion } from \"@aa-sdk/core\";\n\nconst valid = isEntryPointVersion(\"0.6.0\");\nconst invalid = isEntryPointVersion(\"0.8.0\");\n```\n\n## Parameters\n\n### value\n\n`*`\nThe value to be checked\n\n## Returns\n\n`boolean`\ntrue if the value is a valid key of EntryPointRegistry, false otherwise\n"
  },
  "@aa-sdk/core:Logger": {
    "functionName": "Logger",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/Logger/verbose",
    "mdxContent": "---\n# This file is autogenerated\ntitle: verbose\ndescription: Overview of the verbose method\nslug: wallets/reference/aa-sdk/core/classes/Logger/verbose\n---\n\nLogs a message with additional arguments if the logging level permits it.\n\n## Import\n\n```ts\nimport { Logger } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { Logger } from \"@aa-sdk/core\";\n\nLogger.verbose(\"Something is happening\");\n```\n\n## Parameters\n\n### msg\n\n`string`\nThe message to log\n\n### args\n\n`...any[]`\nAdditional arguments to be logged\n"
  },
  "@aa-sdk/core:default7702UserOpSigner": {
    "functionName": "default7702UserOpSigner",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/default7702UserOpSigner",
    "mdxContent": "---\n# This file is autogenerated\ntitle: default7702UserOpSigner\ndescription: Overview of the default7702UserOpSigner method\nslug: wallets/reference/aa-sdk/core/functions/default7702UserOpSigner\n---\n\nProvides a default middleware function for signing user operations with a client account when using EIP-7702 delegated accounts.\nIf the signer doesn't support `signAuthorization`, then this just runs the provided `signUserOperation` middleware.\nThis function is only compatible with accounts using EntryPoint v0.7.0, and the account must have an implementation address defined in `getImplementationAddress()`.\n\n## Import\n\n```ts\nimport { default7702UserOpSigner } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts twoslash\nimport {\n  default7702GasEstimator,\n  default7702UserOpSigner,\n  createSmartAccountClient,\n  type SmartAccountClient,\n} from \"@aa-sdk/core\";\nimport {\n  createModularAccountV2,\n  type CreateModularAccountV2ClientParams,\n} from \"@account-kit/smart-contracts\";\n\nasync function createSMA7702AccountClient(\n  config: CreateModularAccountV2ClientParams,\n): Promise<SmartAccountClient> {\n  const sma7702Account = await createModularAccountV2({\n    ...config,\n    mode: \"7702\",\n  });\n\n  return createSmartAccountClient({\n    account: sma7702Account,\n    gasEstimator: default7702GasEstimator(config.gasEstimator),\n    signUserOperation: default7702UserOpSigner(config.signUserOperation),\n    ...config,\n  });\n}\n```\n\n## Parameters\n\n### userOpSigner\n\n`ClientMiddlewareFn`\nOptional user operation signer function\n\n## Returns\n\n`ClientMiddlewareFn`\nA middleware function that signs EIP-7702 authorization tuples if necessary, and also uses the provided or default user operation signer to generate the user op signature.\n"
  },
  "@aa-sdk/core:default7702GasEstimator": {
    "functionName": "default7702GasEstimator",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/default7702GasEstimator",
    "mdxContent": "---\n# This file is autogenerated\ntitle: default7702GasEstimator\ndescription: Overview of the default7702GasEstimator method\nslug: wallets/reference/aa-sdk/core/functions/default7702GasEstimator\n---\n\nA middleware function to estimate the gas usage of a user operation when using an EIP-7702 delegated account. Has an optional custom gas estimator.\nThis function is only compatible with accounts using EntryPoint v0.7.0, and the account must have an implementation address defined in `getImplementationAddress()`.\n\n## Import\n\n```ts\nimport { default7702GasEstimator } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts twoslash\nimport {\n  default7702GasEstimator,\n  default7702UserOpSigner,\n  createSmartAccountClient,\n  type SmartAccountClient,\n} from \"@aa-sdk/core\";\nimport {\n  createModularAccountV2,\n  type CreateModularAccountV2ClientParams,\n} from \"@account-kit/smart-contracts\";\n\nasync function createSMA7702AccountClient(\n  config: CreateModularAccountV2ClientParams,\n): Promise<SmartAccountClient> {\n  const sma7702Account = await createModularAccountV2({\n    ...config,\n    mode: \"7702\",\n  });\n\n  return createSmartAccountClient({\n    account: sma7702Account,\n    gasEstimator: default7702GasEstimator(config.gasEstimator),\n    signUserOperation: default7702UserOpSigner(config.signUserOperation),\n    ...config,\n  });\n}\n```\n\n## Parameters\n\n### gasEstimator\n\n`ClientMiddlewareFn`\nOptional custom gas estimator function\n\n## Returns\n\n`ClientMiddlewareFn`\nA function that takes user operation struct and parameters, estimates gas usage, and returns the user operation with gas limits.\n"
  },
  "@aa-sdk/core:webauthnGasEstimator": {
    "functionName": "webauthnGasEstimator",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/webauthnGasEstimator",
    "mdxContent": "---\n# This file is autogenerated\ntitle: webauthnGasEstimator\ndescription: Overview of the webauthnGasEstimator method\nslug: wallets/reference/aa-sdk/core/functions/webauthnGasEstimator\n---\n\nA middleware function to estimate the gas usage of a user operation when using a Modular Account V2 WebAuthn account. Has an optional custom gas estimator.\nThis function is only compatible with accounts using EntryPoint v0.7.0, and the account must have an implementation address defined in `getImplementationAddress()`.\n\n## Import\n\n```ts\nimport { webauthnGasEstimator } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts twoslash\nimport {\n  webauthnGasEstimator,\n  createSmartAccountClient,\n  type SmartAccountClient,\n} from \"@aa-sdk/core\";\nimport {\n  createModularAccountV2,\n  type CreateModularAccountV2ClientParams,\n} from \"@account-kit/smart-contracts\";\n\nconst credential = {\n  id: \"credential-id\",\n  publicKey: \"0x...\",\n};\n\nasync function createWebauthnAccountClient(\n  config: CreateModularAccountV2ClientParams,\n): Promise<SmartAccountClient> {\n  const webauthnAccount = await createModularAccountV2({\n    ...config,\n    mode: \"webauthn\",\n    credential,\n  });\n\n  return createSmartAccountClient({\n    account: webAuthnAccount,\n    gasEstimator: webauthnGasEstimator(config.gasEstimator),\n    ...config,\n  });\n}\n```\n\n## Parameters\n\n### gasEstimator\n\n`ClientMiddlewareFn`\nOptional custom gas estimator function\n\n## Returns\n\n`ClientMiddlewareFn`\nA function that takes user operation struct and parameters, estimates gas usage, and returns the user operation with gas limits.\n"
  },
  "@aa-sdk/core:erc7677Middleware": {
    "functionName": "erc7677Middleware",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/erc7677Middleware",
    "mdxContent": "---\n# This file is autogenerated\ntitle: erc7677Middleware\ndescription: Overview of the erc7677Middleware method\nslug: wallets/reference/aa-sdk/core/functions/erc7677Middleware\n---\n\nMiddleware function for interacting with ERC-7677 enabled clients. It supports resolving paymaster and data fields for user operations.\nThis middleware assumes that your RPC provider supports the ERC-7677 methods (pm_getPaymasterStubData and pm_getPaymasterData).\n\n## Import\n\n```ts\nimport { erc7677Middleware } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { createSmartAccountClient, erc7677Middleware } from \"@aa-sdk/core\";\nimport { http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\n\nconst client = createSmartAccountClient({\n  transport: http(\"rpc-url\"),\n  chain: sepolia,\n  // this assumes that your RPC provider supports the ERC-7677 methods AND takes no context\n  ...erc7677Middleware(),\n});\n```\n\n## Parameters\n\n### params\n\n`Erc7677MiddlewareParams<TContext>`\nMiddleware parameters including context function or object. Context can be resolved dynamically by passing in a function which takes in the context at the time of sending a user op\n\n## Returns\n\n`Pick<ClientMiddlewareConfig, \"dummyPaymasterAndData\" | \"paymasterAndData\">`\nAn object containing middleware functions `dummyPaymasterAndData` and `paymasterAndData` for processing user operations with the paymaster data\n"
  },
  "@aa-sdk/core:LocalAccountSigner": {
    "functionName": "LocalAccountSigner",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/LocalAccountSigner/generatePrivateKeySigner",
    "mdxContent": "---\n# This file is autogenerated\ntitle: generatePrivateKeySigner\ndescription: Overview of the generatePrivateKeySigner method\nslug: wallets/reference/aa-sdk/core/classes/LocalAccountSigner/generatePrivateKeySigner\n---\n\nGenerates a new private key and creates a `LocalAccountSigner` for a `PrivateKeyAccount`.\n\n## Import\n\n```ts\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { LocalAccountSigner } from \"@aa-sdk/core\";\n\nconst signer = LocalAccountSigner.generatePrivateKeySigner();\n```\n\n## Returns\n\n`LocalAccountSigner<PrivateKeyAccount>`\nA `LocalAccountSigner` instance initialized with the generated private key account\n"
  },
  "@aa-sdk/core:wrapSignatureWith6492": {
    "functionName": "wrapSignatureWith6492",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/wrapSignatureWith6492",
    "mdxContent": "---\n# This file is autogenerated\ntitle: wrapSignatureWith6492\ndescription: Overview of the wrapSignatureWith6492 method\nslug: wallets/reference/aa-sdk/core/functions/wrapSignatureWith6492\n---\n\nWraps a given signature with additional data following the EIP-6492 standard.\n\n## Import\n\n```ts\nimport { wrapSignatureWith6492 } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { wrapSignatureWith6492 } from \"@aa-sdk/core\";\n\nconst signature = wrapSignatureWith6492({\n  factoryAddress: \"0x...\",\n  factoryCalldata: \"0x...\",\n  signature: \"0x...\",\n});\n```\n\n## Parameters\n\n### params\n\n`SignWith6492Params`\nThe parameters to wrap the signature\n\n### params.factoryAddress\n\n`Hex`\nThe address of the factory\n\n### params.factoryCalldata\n\n`Hex`\nThe calldata for the factory\n\n### params.signature\n\n`Hex`\nThe original signature that needs to be wrapped\n\n## Returns\n\n`Hash`\nThe wrapped signature\n"
  },
  "@aa-sdk/core:WalletClientSigner": {
    "functionName": "WalletClientSigner",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/classes/WalletClientSigner/signTypedData",
    "mdxContent": "---\n# This file is autogenerated\ntitle: signTypedData\ndescription: Overview of the signTypedData method\nslug: wallets/reference/aa-sdk/core/classes/WalletClientSigner/signTypedData\n---\n\nSigns the provided typed data using the account's private key.\n\n## Import\n\n```ts\nimport { WalletClientSigner } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { WalletClientSigner } from \"@aa-sdk/core\";\nimport { createWalletClient, custom } from \"viem\";\nimport { mainnet } from \"viem/chains\";\n\nconst client = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n});\n\nconst signer = new WalletClientSigner(client, \"wallet\");\nconsole.log(\n  await signer.signTypedData({\n    types: {\n      Message: [{ name: \"content\", type: \"string\" }],\n    },\n    primaryType: \"Message\",\n    message: { content: \"Hello\" },\n  }),\n);\n```\n\n## Parameters\n\n### typedData\n\n`TypedDataDefinition<TTypedData, TPrimaryType>`\nThe typed data to be signed\n\n## Returns\n\n`Promise<Hex>`\nA promise that resolves to a hex string representing the signed data\n"
  },
  "@aa-sdk/core:split": {
    "functionName": "split",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/split",
    "mdxContent": "---\n# This file is autogenerated\ntitle: split\ndescription: Overview of the split method\nslug: wallets/reference/aa-sdk/core/functions/split\n---\n\nThe Split Transport allows you to split RPC traffic for specific methods across\ndifferent RPC providers. This is done by specifying the methods you want handled\nspecially as overrides and providing a fallback transport for all other methods.\n\n## Import\n\n```ts\nimport { split } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { createPublicClient, http } from \"viem\";\nimport { split } from \"@aa-sdk/core\";\n\nconst bundlerMethods = [\n  \"eth_sendUserOperation\",\n  \"eth_estimateUserOperationGas\",\n  \"eth_getUserOperationReceipt\",\n  \"eth_getUserOperationByHash\",\n  \"eth_supportedEntryPoints\",\n];\n\nconst clientWithSplit = createPublicClient({\n  transport: split({\n    overrides: [\n      {\n        methods: bundlerMethods,\n        transport: http(BUNDLER_RPC_URL),\n      },\n    ],\n    fallback: http(OTHER_RPC_URL),\n  }),\n});\n```\n\n## Parameters\n\n### params\n\n`SplitTransportParams`\nsplit transport configuration containing the methods overrides and fallback transport\n\n## Returns\n\n`CustomTransport`\na viem Transport that splits traffic\n"
  },
  "@aa-sdk/core:filterUndefined": {
    "functionName": "filterUndefined",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/filterUndefined",
    "mdxContent": "---\n# This file is autogenerated\ntitle: filterUndefined\ndescription: Overview of the filterUndefined method\nslug: wallets/reference/aa-sdk/core/functions/filterUndefined\n---\n\nFilters out properties with undefined or null values from the provided object.\n\n## Import\n\n```ts\nimport { filterUndefined } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { filterUndefined } from \"@aa-sdk/core\";\n\nconst result = filterUndefined({\n  foo: undefined,\n  bar: null,\n  baz: \"baz\",\n}); // { baz: \"baz\" }\n```\n\n## Parameters\n\n### obj\n\n`T`\nthe object from which to remove properties with undefined or null values\n\n## Returns\n\n`T`\nthe object with undefined or null properties removed\n"
  },
  "@aa-sdk/core:pick": {
    "functionName": "pick",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/pick",
    "mdxContent": "---\n# This file is autogenerated\ntitle: pick\ndescription: Overview of the pick method\nslug: wallets/reference/aa-sdk/core/functions/pick\n---\n\nPicks the specified keys from an object and returns a new object containing only those key-value pairs.\n\n## Import\n\n```ts\nimport { pick } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { pick } from \"@aa-sdk/core\";\n\nconst picked = pick(\n  {\n    foo: \"foo\",\n    bar: \"bar\",\n  },\n  [\"foo\"],\n); // { foo: \"foo\" }\n```\n\n## Parameters\n\n### obj\n\n`Record<string, unknown>`\nThe object from which to pick keys\n\n### keys\n\n`string|string[]`\nA single key or an array of keys to pick from the object\n\n## Returns\n\n`Record<string, unknown>`\nA new object containing only the picked key-value pairs\n"
  },
  "@aa-sdk/core:toRecord": {
    "functionName": "toRecord",
    "packageName": "@aa-sdk/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/aa-sdk/core/functions/toRecord",
    "mdxContent": "---\n# This file is autogenerated\ntitle: toRecord\ndescription: Overview of the toRecord method\nslug: wallets/reference/aa-sdk/core/functions/toRecord\n---\n\nConverts an array of objects into a record (object) where each key is determined by the specified selector and the value is determined by the provided function.\n\n## Import\n\n```ts\nimport { toRecord } from \"@aa-sdk/core\";\n```\n\n## Usage\n\n```ts\nimport { toRecord } from \"@aa-sdk/core\";\nimport { sepolia, mainnet } from \"viem/chains\";\n\nconst addressesByChain = toRecord([sepolia, mainnet], \"id\", () => \"0x...\"); // { [sepolia.id]: \"0x...\", [mainnet.id]: \"0x...\" }\n```\n\n## Parameters\n\n### array\n\n`T[]`\nThe array of objects to convert to a record\n\n### selector\n\n`K`\nThe key used to select the property that will become the record's key\n\n### fn\n\n`(item: T) => V`\nThe function that transforms each item in the array into the record's value\n\n## Returns\n\n`Record<T[K], V>`\nThe resulting record object\n"
  }
}
