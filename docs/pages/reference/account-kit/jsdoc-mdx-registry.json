{
  "@account-kit/core:getChain": {
    "functionName": "getChain",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/getChain",
    "mdxContent": "---\n# This file is autogenerated\ntitle: getChain\ndescription: Overview of the getChain method\nslug: wallets/reference/account-kit/core/functions/getChain\n---\n\nGets the currently active chain\n\n## Import\n\n```ts\nimport { getChain } from \"@account-kit/core\";\n```\n\n## Parameters\n\n### config\n\n`AlchemyAccountsConfig`\nthe account config object\n\n## Returns\n\n`Chain`\nthe currently active chain\n"
  },
  "@account-kit/core:convertSignerStatusToState": {
    "functionName": "convertSignerStatusToState",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/convertSignerStatusToState",
    "mdxContent": "---\n# This file is autogenerated\ntitle: convertSignerStatusToState\ndescription: Overview of the convertSignerStatusToState method\nslug: wallets/reference/account-kit/core/functions/convertSignerStatusToState\n---\n\nConverts the AlchemySigner's status to a more readable object\n\n## Import\n\n```ts\nimport { convertSignerStatusToState } from \"@account-kit/core\";\n```\n\n## Parameters\n\n### alchemySignerStatus\n\n`AlchemySignerStatus`\nEnum value of the AlchemySigner's status to convert\n\n### error\n\n`ErrorInfo | undefined`\nthe current signer error, if present\n\n## Returns\n\n`SignerStatus`\nan object containing the original status as well as booleans to check the current state\n"
  },
  "@account-kit/core:createDefaultAccountState": {
    "functionName": "createDefaultAccountState",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/createDefaultAccountState",
    "mdxContent": "---\n# This file is autogenerated\ntitle: createDefaultAccountState\ndescription: Overview of the createDefaultAccountState method\nslug: wallets/reference/account-kit/core/functions/createDefaultAccountState\n---\n\nCreates the default account state for the given chains.\n\n## Import\n\n```ts\nimport { createDefaultAccountState } from \"@account-kit/core\";\n```\n\n## Parameters\n\n### chains\n\n`Chain[]`\nThe chains to create the account state for\n\n## Returns\n\n`NoUndefined<StoreState[\"accounts\"]>`\nThe default account state for the given chains\n"
  },
  "@account-kit/core:cookieStorage": {
    "functionName": "cookieStorage",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/cookieStorage",
    "mdxContent": "---\n# This file is autogenerated\ntitle: cookieStorage\ndescription: Overview of the cookieStorage method\nslug: wallets/reference/account-kit/core/functions/cookieStorage\n---\n\nFunction to create cookie based Storage\n\n## Import\n\n```ts\nimport { cookieStorage } from \"@account-kit/core\";\n```\n\n## Parameters\n\n### config\n\n`{sessionLength: number; domain?: string}`\noptional config object\n\n### config.sessionLength\n\n`number`\nthe duration until the cookie expires in milliseconds (deprecated)\n\n### config.domain\n\n`string`\noptional domain to set the cookie on, eg: `example.com` if you want the cookie to work on all subdomains of example.com\n\n## Returns\n\n`Storage`\nan instance of a browser storage object that leverages cookies\n"
  },
  "@account-kit/core:cookieToInitialState": {
    "functionName": "cookieToInitialState",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/cookieToInitialState",
    "mdxContent": "---\n# This file is autogenerated\ntitle: cookieToInitialState\ndescription: Overview of the cookieToInitialState method\nslug: wallets/reference/account-kit/core/functions/cookieToInitialState\n---\n\nConverts a cookie into an initial state object\n\n## Import\n\n```ts\nimport { cookieToInitialState } from \"@account-kit/core\";\n```\n\n## Parameters\n\n### config\n\n`AlchemyAccountsConfig`\nthe account config containing the client store\n\n### cookie\n\n`string | undefined`\noptional cookie string\n\n## Returns\n\n`StoredState | undefined`\nthe deserialized AlchemyClientState if the cookie exists, otherwise undefined\n"
  },
  "@account-kit/core:parseCookie": {
    "functionName": "parseCookie",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/parseCookie",
    "mdxContent": "---\n# This file is autogenerated\ntitle: parseCookie\ndescription: Overview of the parseCookie method\nslug: wallets/reference/account-kit/core/functions/parseCookie\n---\n\nHelper function that can be used to parse a cookie string on the server or client\n\n## Import\n\n```ts\nimport { parseCookie } from \"@account-kit/core\";\n```\n\n## Parameters\n\n### cookie\n\n`string`\nthe cookie string to parse\n\n### key\n\n`string`\nthe key of the cookie to parse\n\n## Returns\n\n`string`\nthe value of the cookie given a key if it exists, otherwise undefined\n"
  },
  "@account-kit/core:ClientOnlyPropertyError": {
    "functionName": "ClientOnlyPropertyError",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/classes/ClientOnlyPropertyError/constructor",
    "mdxContent": "---\n# This file is autogenerated\ntitle: ClientOnlyPropertyError\ndescription: Overview of the ClientOnlyPropertyError method\nslug: wallets/reference/account-kit/core/classes/ClientOnlyPropertyError/constructor\n---\n\nCreates a new ClientOnlyPropertyError\n\n<Note>\n  `ClientOnlyPropertyError` extends `BaseError`, see the docs for BaseError for\n  all supported methods.\n</Note>\n\n## Import\n\n```ts\nimport { ClientOnlyPropertyError } from \"@account-kit/core\";\n```\n\n## Parameters\n\n### property\n\n`string`\nthe name of the property that is only available on the client\n"
  },
  "@account-kit/core:createAccount": {
    "functionName": "createAccount",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/createAccount",
    "mdxContent": "---\n# This file is autogenerated\ntitle: createAccount\ndescription: Overview of the createAccount method\nslug: wallets/reference/account-kit/core/functions/createAccount\n---\n\nCreates an account of a specified type using the provided parameters and configuration. Supports creating LightAccount and MultiOwnerModularAccount types.\n\n## Import\n\n```ts\nimport { createAccount } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { createAccount } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nconst account = createAccount(\n  {\n    type: \"LightAccount\",\n  },\n  config,\n);\n```\n\n## Parameters\n\n### params\n\n`CreateAccountParams<TAccount>`\nThe parameters required to create the account, including the type and account parameters\n\n### config\n\n`AlchemyAccountsConfig`\nThe configuration object for Alchemy accounts\n\n## Returns\n\n`Promise<SupportedAccounts>`\nA promise that resolves to the created account object\n"
  },
  "@account-kit/core:disconnect": {
    "functionName": "disconnect",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/disconnect",
    "mdxContent": "---\n# This file is autogenerated\ntitle: disconnect\ndescription: Overview of the disconnect method\nslug: wallets/reference/account-kit/core/functions/disconnect\n---\n\nDisconnects the current signer, accounts, and clears the store.\n\n## Import\n\n```ts\nimport { disconnect } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { disconnect, createConfig } from \"@account-kit/core\";\nimport { sepolia } from \"@account-kit/infra\";\n\nconst config = createConfig({\n  chain: sepolia,\n  apiKey: \"your-api-key\",\n});\n\nawait disconnect(config);\n```\n\n## Parameters\n\n### config\n\n`AlchemyAccountsConfig`\nThe configuration containing the store to be cleared\n"
  },
  "@account-kit/core:getAccount": {
    "functionName": "getAccount",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/getAccount",
    "mdxContent": "---\n# This file is autogenerated\ntitle: getAccount\ndescription: Overview of the getAccount method\nslug: wallets/reference/account-kit/core/functions/getAccount\n---\n\nRetrieves the account of the specified type from the client store based on the provided configuration.\n\n## Import\n\n```ts\nimport { getAccount } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { getAccount } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nconst { account, status } = getAccount(\n  {\n    type: \"LightAccount\",\n  },\n  config,\n);\n```\n\n## Parameters\n\n### params\n\n`GetAccountParams<TAccount>`\nThe parameters containing the type of the account to retrieve\n\n### config\n\n`AlchemyAccountsConfig`\nThe configuration containing the client store\n\n## Returns\n\n`GetAccountResult<TAccount>`\nThe result which includes the account if found and its status\n"
  },
  "@account-kit/core:getBundlerClient": {
    "functionName": "getBundlerClient",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/getBundlerClient",
    "mdxContent": "---\n# This file is autogenerated\ntitle: getBundlerClient\ndescription: Overview of the getBundlerClient method\nslug: wallets/reference/account-kit/core/functions/getBundlerClient\n---\n\nRetrieves the BundlerClient from the core store of the given AlchemyAccountsConfig.\n\n## Import\n\n```ts\nimport { getBundlerClient } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\n// see `createConfig` for more information on how to create a config\nimport { config } from \"./config\";\n\nconst bundlerClient = getBundlerClient(config);\n```\n\n## Parameters\n\n### config\n\n`AlchemyAccountsConfig`\nThe configuration object containing the core store.\n\n## Returns\n\n`ClientWithAlchemyMethods`\nThe BundlerClient from the core store.\n"
  },
  "@account-kit/core:getConnection": {
    "functionName": "getConnection",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/getConnection",
    "mdxContent": "---\n# This file is autogenerated\ntitle: getConnection\ndescription: Overview of the getConnection method\nslug: wallets/reference/account-kit/core/functions/getConnection\n---\n\nUsed to get the connection for the currently active chain\n\n## Import\n\n```ts\nimport { getConnection } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { getConnection } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nconst connection = getConnection(config);\n```\n\n## Parameters\n\n### config\n\n`AlchemyAccountsConfig`\nthe account config\n\n## Returns\n\n`Connection`\na connection object for the current active chain\n"
  },
  "@account-kit/core:getSigner": {
    "functionName": "getSigner",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/getSigner",
    "mdxContent": "---\n# This file is autogenerated\ntitle: getSigner\ndescription: Overview of the getSigner method\nslug: wallets/reference/account-kit/core/functions/getSigner\n---\n\nIf there is a signer attached to the client state, it will return it.\nThe signer should always be null on the server, and will be set on the client\nif the store was properly hydrated.\n\n## Import\n\n```ts\nimport { getSigner } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { getSigner } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nconst signer = getSigner(config);\n```\n\n## Parameters\n\n### config\n\n`AlchemyAccountsConfig`\nThe account config which contains the client store\n\n## Returns\n\n`AlchemySigner | null`\nthe instance of the signer present in the store if it exists, otherwise null\n"
  },
  "@account-kit/core:getSignerStatus": {
    "functionName": "getSignerStatus",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/getSignerStatus",
    "mdxContent": "---\n# This file is autogenerated\ntitle: getSignerStatus\ndescription: Overview of the getSignerStatus method\nslug: wallets/reference/account-kit/core/functions/getSignerStatus\n---\n\nRetrieves the signer status from the client's store in the provided configuration.\n\n## Import\n\n```ts\nimport { getSignerStatus } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { getSignerStatus } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nconst signerStatus = getSignerStatus(config);\n```\n\n## Parameters\n\n### config\n\n`AlchemyAccountsConfig`\nThe configuration object containing the client store\n\n## Returns\n\n`SignerStatus`\nThe current signer status from the client store\n"
  },
  "@account-kit/core:getSmartAccountClient": {
    "functionName": "getSmartAccountClient",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/getSmartAccountClient",
    "mdxContent": "---\n# This file is autogenerated\ntitle: getSmartAccountClient\ndescription: Overview of the getSmartAccountClient method\nslug: wallets/reference/account-kit/core/functions/getSmartAccountClient\n---\n\nObtains a smart account client based on the provided parameters and configuration. Supports creating any of the SupportAccountTypes in Account Kit.\nIf the signer is not connected, or an account is already being intializes, this results in a loading state.\n\n## Import\n\n```ts\nimport { getSmartAccountClient } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { getSmartAccountClient } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nconst { client, address, isLoadingClient } = getSmartAccountClient(\n  {\n    type: \"LightAccount\",\n  },\n  config,\n);\n```\n\n## Parameters\n\n### params\n\n`GetSmartAccountClientParams`\nParameters for getting the smart account client, including account parameters and client parameters\n\n### config\n\n`AlchemyAccountsConfig`\nThe configuration containing the client store and other necessary information\n\n## Returns\n\n`GetSmartAccountClientResult`\nThe result object which includes the client, address, and loading status of the client\n"
  },
  "@account-kit/core:getSolanaConnection": {
    "functionName": "getSolanaConnection",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/getSolanaConnection",
    "mdxContent": "---\n# This file is autogenerated\ntitle: getSolanaConnection\ndescription: Overview of the getSolanaConnection method\nslug: wallets/reference/account-kit/core/functions/getSolanaConnection\n---\n\nUsed to get the connection for the id\n\n## Import\n\n```ts\nimport { getSolanaConnection } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { getSolanaConnection } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nconst connection = getSolanaConnection(config);\n```\n\n## Parameters\n\n### config\n\n`AlchemyAccountsConfig`\nthe account config\n\n## Returns\n\n`SolanaConnection | void`\na connection object for the current active chain\n"
  },
  "@account-kit/core:getUser": {
    "functionName": "getUser",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/getUser",
    "mdxContent": "---\n# This file is autogenerated\ntitle: getUser\ndescription: Overview of the getUser method\nslug: wallets/reference/account-kit/core/functions/getUser\n---\n\nReturns the currently logged in user if using an SCA with the AlchemySigner\nor the connected EOA details.\n\n## Import\n\n```ts\nimport { getUser } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { getUser } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nconst user = getUser(config);\n```\n\n## Parameters\n\n### config\n\n`AlchemyAccountsConfig`\nthe account config containing app state\n\n## Returns\n\n`GetUserResult`\nthe user if the signer or an EOA are connected\n"
  },
  "@account-kit/core:reconnect": {
    "functionName": "reconnect",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/reconnect",
    "mdxContent": "---\n# This file is autogenerated\ntitle: reconnect\ndescription: Overview of the reconnect method\nslug: wallets/reference/account-kit/core/functions/reconnect\n---\n\nThis method will use the current state in the client store and attempt to restore\nconnected instances of previously used accounts and the signer.\n\n## Import\n\n```ts\nimport { reconnect } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { reconnect } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nawait reconnect(config);\n```\n\n## Parameters\n\n### config\n\n`AlchemyAccountsConfig`\nthe account config which contains the client store\n"
  },
  "@account-kit/core:setChain": {
    "functionName": "setChain",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/setChain",
    "mdxContent": "---\n# This file is autogenerated\ntitle: setChain\ndescription: Overview of the setChain method\nslug: wallets/reference/account-kit/core/functions/setChain\n---\n\nAllows you to change the current chain in the core store. Note, this chain\nmust be one of the chains configured in your original createConfig call.\n\n## Import\n\n```ts\nimport { setChain } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { setChain } from \"@account-kit/core\";\nimport { config } from \"./config\";\nimport { sepolia } from \"@account-kit/infra\";\n\nawait setChain(config, sepolia);\n```\n\n## Parameters\n\n### config\n\n`AlchemyAccountsConfig`\nthe accounts config object\n\n### chain\n\n`Chain`\nthe chain to change to. It must be present in the connections config object\n"
  },
  "@account-kit/core:watchAccount": {
    "functionName": "watchAccount",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/watchAccount",
    "mdxContent": "---\n# This file is autogenerated\ntitle: watchAccount\ndescription: Overview of the watchAccount method\nslug: wallets/reference/account-kit/core/functions/watchAccount\n---\n\nWatches for changes to a specific type of account and triggers the provided callback function when changes occur.\n\n## Import\n\n```ts\nimport { watchAccount } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { watchAccount } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchAccount(\"LightAccount\", config)(console.log);\n```\n\n## Parameters\n\n### type\n\n`TAccount`\nThe type of account to watch\n\n### config\n\n`AlchemyAccountsConfig`\nThe configuration containing client store settings\n\n## Returns\n\n`(onChange: (account: GetAccountResult<TAccount>) => void) => (() => void)`\nA function that accepts a callback to be called when the account changes and returns a function to unsubscribe from the store\n"
  },
  "@account-kit/core:watchBundlerClient": {
    "functionName": "watchBundlerClient",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/watchBundlerClient",
    "mdxContent": "---\n# This file is autogenerated\ntitle: watchBundlerClient\ndescription: Overview of the watchBundlerClient method\nslug: wallets/reference/account-kit/core/functions/watchBundlerClient\n---\n\nWatches for changes to the bundler client within the given configuration and triggers a callback when changes occur.\n\n## Import\n\n```ts\nimport { watchBundlerClient } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { watchBundlerClient } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchBundlerClient(config)(console.log);\n```\n\n## Parameters\n\n### config\n\n`AlchemyAccountsConfig`\nThe configuration object containing the core store\n\n## Returns\n\n`(onChange: (bundlerClient: ClientWithAlchemyMethods) => void) => (() => void)`\nA function accepting a callback function to invoke when the bundler client changes and returns a function to unsubscribe from the store\n"
  },
  "@account-kit/core:watchChain": {
    "functionName": "watchChain",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/watchChain",
    "mdxContent": "---\n# This file is autogenerated\ntitle: watchChain\ndescription: Overview of the watchChain method\nslug: wallets/reference/account-kit/core/functions/watchChain\n---\n\nAllows you to subscribe to changes of the chain in the client store.\n\n## Import\n\n```ts\nimport { watchChain } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { watchChain } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchChain(config)(console.log);\n```\n\n## Parameters\n\n### config\n\n`AlchemyAccountsConfig`\nthe account config object\n\n## Returns\n\n`(onChange: (chain: Chain) => void) => (() => void)`\na function which accepts an onChange callback that will be fired when the chain changes and returns a function to unsubscribe from the store\n"
  },
  "@account-kit/core:watchConnection": {
    "functionName": "watchConnection",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/watchConnection",
    "mdxContent": "---\n# This file is autogenerated\ntitle: watchConnection\ndescription: Overview of the watchConnection method\nslug: wallets/reference/account-kit/core/functions/watchConnection\n---\n\nSubscribe to changes to the active connection\n\n## Import\n\n```ts\nimport { watchConnection } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { watchConnection } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchConnection(config)(console.log);\n```\n\n## Parameters\n\n### config\n\n`AlchemyAccountsConfig`\nthe account config\n\n## Returns\n\n`(onChange: (connection: Connection) => void) => (() => void)`\na function which accepts an onChange callback that will be fired when the connection changes and returns a function to unsubscribe from the store\n"
  },
  "@account-kit/core:watchSigner": {
    "functionName": "watchSigner",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/watchSigner",
    "mdxContent": "---\n# This file is autogenerated\ntitle: watchSigner\ndescription: Overview of the watchSigner method\nslug: wallets/reference/account-kit/core/functions/watchSigner\n---\n\nSubscribe to changes of the signer instance on the client store.\n\n## Import\n\n```ts\nimport { watchSigner } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { watchSigner } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchSigner(config)(console.log);\n```\n\n## Parameters\n\n### config\n\n`AlchemyAccountsConfig`\nthe account config containing the client store\n\n## Returns\n\n`(onChange: (chain: AlchemySigner) => void) => (() => void)`\na function which accepts an onChange callback that will be fired when the signer changes and returns a function to unsubscribe from the store\n"
  },
  "@account-kit/core:watchSignerStatus": {
    "functionName": "watchSignerStatus",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/watchSignerStatus",
    "mdxContent": "---\n# This file is autogenerated\ntitle: watchSignerStatus\ndescription: Overview of the watchSignerStatus method\nslug: wallets/reference/account-kit/core/functions/watchSignerStatus\n---\n\nWatches the signer status in the client store and triggers the provided callback function when the status changes.\n\n## Import\n\n```ts\nimport { watchSignerStatus } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { watchSignerStatus } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchSignerStatus(config)(console.log);\n```\n\n## Parameters\n\n### config\n\n`AlchemyAccountsConfig`\nThe configuration object containing the client store\n\n## Returns\n\n`(onChange: (status: SignerStatus) => void) => (() => void)`\nA function that accepts a callback to be called when the signer status changes which returns a function to unsubscribe from the store\n"
  },
  "@account-kit/core:watchSmartAccountClient": {
    "functionName": "watchSmartAccountClient",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/watchSmartAccountClient",
    "mdxContent": "---\n# This file is autogenerated\ntitle: watchSmartAccountClient\ndescription: Overview of the watchSmartAccountClient method\nslug: wallets/reference/account-kit/core/functions/watchSmartAccountClient\n---\n\nWatches for changes to the smart account client and triggers the provided callback when a change is detected.\n\n## Import\n\n```ts\nimport { watchSmartAccountClient } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { watchSmartAccountClient } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchSmartAccountClient({ type: \"LightAccount\" }, config)(console.log);\n```\n\n## Parameters\n\n### params\n\n`GetSmartAccountClientParams<TChain, TAccount>`\nthe parameters needed to get the smart account client\n\n### config\n\n`AlchemyAccountsConfig`\nthe configuration containing the client store and other settings\n\n## Returns\n\n`(onChange: (client: GetSmartAccountClientResult<TChain, SupportedAccount<TAccount>>) => void) => (() => void)`\na function that accepts a callback to be called when the client changes and returns a function to unsubscribe from the store\n"
  },
  "@account-kit/core:watchSolanaConnection": {
    "functionName": "watchSolanaConnection",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/watchSolanaConnection",
    "mdxContent": "---\n# This file is autogenerated\ntitle: watchSolanaConnection\ndescription: Overview of the watchSolanaConnection method\nslug: wallets/reference/account-kit/core/functions/watchSolanaConnection\n---\n\nSubscribe to changes to the solana connection for the id\n\n## Import\n\n```ts\nimport { watchSolanaConnection } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts twoslash\nimport { watchSolanaConnection } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nconst config = {} as any;\n\nwatchSolanaConnection(config)(console.log);\n```\n\n## Parameters\n\n### config\n\n`AlchemyAccountsConfig`\nthe account config of the connection\n\n## Returns\n\n`(onChange: (connection: Connection) => void) => (() => void)`\na function which accepts an onChange callback that will be fired when the connection changes and returns a function to unsubscribe from the store\n"
  },
  "@account-kit/core:watchUser": {
    "functionName": "watchUser",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/watchUser",
    "mdxContent": "---\n# This file is autogenerated\ntitle: watchUser\ndescription: Overview of the watchUser method\nslug: wallets/reference/account-kit/core/functions/watchUser\n---\n\nWatches for changes to the user in the client store and triggers the provided callback when a change is detected.\n\n## Import\n\n```ts\nimport { watchUser } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { watchUser } from \"@account-kit/core\";\n// see createConfig for more information on how to create a config\nimport { config } from \"./config\";\n\nwatchUser(config)(console.log);\n```\n\n## Parameters\n\n### config\n\n`AlchemyAccountsConfig`\nthe configuration containing the client store\n\n## Returns\n\n`(onChange: (user: User) => void) => (() => void)`\na function which accepts a callback that fires when the user changes and returns a function to unsubscribe from the user updates\n"
  },
  "@account-kit/core:createConfig": {
    "functionName": "createConfig",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/createConfig",
    "mdxContent": "---\n# This file is autogenerated\ntitle: createConfig\ndescription: Overview of the createConfig method\nslug: wallets/reference/account-kit/core/functions/createConfig\n---\n\nCreates an AlchemyAccountsConfig object that can be used in conjunction with\nthe actions exported from `@account-kit/core`.\n\nThe config contains core and client stores that can be used to manage account state\nin your application.\n\n## Import\n\n```ts\nimport { createConfig } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { createConfig } from \"@account-kit/core\";\nimport { sepolia } from \"@account-kit/infra\";\n\nconst config = createConfig({\n  chain: sepolia,\n  transport: alchemy({ apiKey: \"your-api-key\" }),\n});\n```\n\n## Parameters\n\n### params\n\n`CreateConfigProps`\nThe parameters to create the config with\n\n## Returns\n\n`AlchemyAccountsConfig`\nAn alchemy account config object containing the core and client store\n"
  },
  "@account-kit/core:hydrate": {
    "functionName": "hydrate",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/hydrate",
    "mdxContent": "---\n# This file is autogenerated\ntitle: hydrate\ndescription: Overview of the hydrate method\nslug: wallets/reference/account-kit/core/functions/hydrate\n---\n\nWill hydrate the client store with the provided initial state if one is provided.\n\n## Import\n\n```ts\nimport { hydrate } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { hydrate, cookieToInitialState } from \"@account-kit/core\";\nimport { config } from \"./config\";\n\nconst initialState = cookieToInitialState(document.cookie);\nconst { onMount } = hydrate(config, initialState);\n// call onMount once your component has mounted\n```\n\n## Parameters\n\n### config\n\n`AlchemyAccountsConfig`\nthe config containing the client store\n\n### initialState\n\n`StoredState`\noptional param detailing the initial ClientState\n\n## Returns\n\n`{ onMount: () => Promise<void> }`\nan object containing an onMount function that can be called when your component first renders on the client\n"
  },
  "@account-kit/core:defaultAccountState": {
    "functionName": "defaultAccountState",
    "packageName": "@account-kit/core",
    "filePath": "/Users/blake.duncan/Documents/workspace/aa-sdk/docs/pages/reference/account-kit/core/functions/defaultAccountState",
    "mdxContent": "---\n# This file is autogenerated\ntitle: defaultAccountState\ndescription: Overview of the defaultAccountState method\nslug: wallets/reference/account-kit/core/functions/defaultAccountState\n---\n\nReturns the default state for an account of a supported type.\n\n## Import\n\n```ts\nimport { defaultAccountState } from \"@account-kit/core\";\n```\n\n## Usage\n\n```ts\nimport { defaultAccountState } from \"@account-kit/core\";\n\nconst defaultLightAccountState = defaultAccountState<\"LightAccount\">();\n```\n\n## Returns\n\n`AccountState<T>`\nThe default state for the specified account type\n"
  }
}
