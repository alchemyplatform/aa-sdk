# yaml-language-server: $schema=https://spec.openapis.org/oas/3.1/schema/2022-10-07

openapi: 3.1.0
info:
  title: "ðŸ‘¤ Smart Wallets"
  version: "1.0"
servers:
  - url: https://api.g.alchemy.com/signer/v1
security:
  - apiKey: []
paths:
  /signup:
    post:
      summary: Create Wallet
      description: >
        Enables the creation of a Smart Wallet using Alchemy Signer. It allows applications to authenticate users and facilitate signature operations on their behalf. A Smart Wallet is either an on-chain Modular Account with Alchemy Signer as the owner, a standalone EOA signer managed through Alchemy Signer, or a standalone Solana Wallet managed through the Alchemy Signer.
      security:
        - apiKey: []
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Used for user authentication when passkey is not provided. Specifies the user's email address.
                passkey:
                  type: object
                  description: Used for authentication when email is not provided. Enables passkey-based authentication.
                  properties:
                    challenge:
                      type: string
                      description: A challenge string for passkey authentication.
                    attestation:
                      type: object
                      description: Provides attestation details required for passkey authentication.
                      properties:
                        credentialId:
                          type: string
                          description: The credential ID used for attestation.
                        clientDataJson:
                          type: string
                          description: JSON data from the client used for attestation.
                        attestationObject:
                          type: string
                          description: The attestation object received during the authentication process.
                        transports:
                          type: array
                          description: Transport protocols used during attestation.
                          items:
                            type: string
                      required:
                        - credentialId
                        - clientDataJson
                        - attestationObject
                        - transports
                  required:
                    - challenge
                    - attestation
                targetPublicKey:
                  $ref: "#/components/schemas/targetPublicKey"
                expirationSeconds:
                  $ref: "#/components/schemas/expirationSeconds"
                redirectParams:
                  $ref: "#/components/schemas/redirectParams"
      responses:
        "200":
          description: Wallet creation response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  orgId:
                    $ref: "#/components/schemas/orgId"
                  userId:
                    type: string
                    description: A unique identifier for the user.
                  address:
                    type: string
                    description: The EVM address of the signer.
                  solanaAddress:
                    type: string
                    description: The Solana address of the signer.
                  otpId:
                    $ref: "#/components/schemas/otpId"
                required:
                  - orgId
      operationId: createAccount
  /auth:
    post:
      summary: Send Auth Email
      description: >
        Sends a user an email containing a magic link for authentication, allowing them to complete the login process and access their Smart Wallet through a secure, simple email verification method. Developers can customize the appearance and content of the authentication email through Alchemy dashboard to align with their application's branding and user experience requirements.
      security:
        - apiKey: []
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/email"
                  description: The email address of the user requesting access. This is where the authentication email, containing the magic link, will be sent.
                targetPublicKey:
                  $ref: "#/components/schemas/targetPublicKey"
                expirationSeconds:
                  $ref: "#/components/schemas/expirationSeconds"
                redirectParams:
                  $ref: "#/components/schemas/redirectParams"
              required:
                - email
                - targetPublicKey
      responses:
        "200":
          description: Authentication email sent successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  orgId:
                    $ref: "#/components/schemas/orgId"
                    description: The organization ID associated with the user and the application, facilitating the authentication process within the context of the user's application.
                  otpId:
                    $ref: "#/components/schemas/otpId"
                required:
                  - orgId
      operationId: sendEmailAuth
  /whoami:
    post:
      summary: Authenticate User
      description: >
        Authenticates a user and returns their identity and wallet information, enabling the application to grant the user access to their Smart Wallet functionalities. This endpoint is used to confirm user authentication via email or passkey, thereby authorizing them to perform actions as the owner of a smart account or to conduct transactions as an EOA signer. It ensures that only authenticated users can access and manage their wallets.
      security:
        - apiKey: []
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stampedRequest:
                  $ref: "#/components/schemas/SignedTurnkeyRequest"
                  description: >
                    A stamped [Turnkey Whoami Request](https://docs.turnkey.com/api#tag/Sessions/operation/GetWhoami).
              required:
                - stampedRequest
      responses:
        "200":
          description: User authentication successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    $ref: "#/components/schemas/email"
                    description: The authenticated user's email address.
                  userId:
                    type: string
                    description: A unique identifier for the authenticated user.
                  orgId:
                    $ref: "#/components/schemas/orgId"
                    description: The organization ID associated with the authenticated user's account.
                  address:
                    type: string
                    description: The Ethereum address of the user's signer. Essential for executing transactions and managing the wallet.
                  solanaAddress:
                    type: string
                    description: The Solana address of the user's signer. Required for Solana transactions and wallet management.
                required:
                  - userId
                  - orgId
                  - address
      operationId: authUser
  /lookup:
    post:
      summary: Get User
      description: >
        Enables applications to query the existence of a user wallet based on an email address.
      security:
        - apiKey: []
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/email"
                  description: The email address of the user to look up. This is used to verify if an associated account exists within the system.
              required:
                - email
      responses:
        "200":
          description: Query successful. Returns organization ID if an account exists for the provided email address.
          content:
            application/json:
              schema:
                type: object
                properties:
                  orgId:
                    $ref: "#/components/schemas/orgId"
                    description: >
                      The organization ID associated with the user. This ID is returned if an account exists for the given email address. If no account is found, this value will be null. The response is intentionally limited to this information to protect user privacy and security.
      operationId: getUser
  /otp:
    post:
      summary: Verify OTP Code
      description: >
        Verifies a one-time password (OTP) code sent to the user's email for authentication. This endpoint allows users to complete the authentication process by providing the OTP code they received, enabling secure access to their Smart Wallet functionalities.
      security:
        - apiKey: []
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                otpCode:
                  type: string
                  description: The one-time password code sent to the user's email or phone number. This code is typically 6-8 digits long and expires after a short period.
                otpId:
                  $ref: "#/components/schemas/otpId"
                  description: The OTP request identifier returned from the initial authentication request. This links the verification attempt to the original OTP generation.
                orgId:
                  $ref: "#/components/schemas/orgId"
                targetPublicKey:
                  $ref: "#/components/schemas/targetPublicKey"
                expirationSeconds:
                  $ref: "#/components/schemas/expirationSeconds"
              required:
                - orgId
                - otpCode
                - otpId
                - targetPublicKey
      responses:
        "200":
          description: OTP verification successful. User is now authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  credentialBundle:
                    type: string
                    description: An encrypted API key credential bundle that can be used for subsequent authenticated requests. This bundle contains the authentication credentials encrypted with the provided targetPublicKey and can be decrypted client-side for stamping requests.
                required:
                  - credentialBundle
        "400":
          description: Invalid OTP code or expired OTP.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message describing why the OTP verification failed.
                  code:
                    type: string
                    description: Error code for programmatic handling of the error.
        "429":
          description: Too many OTP verification attempts. Please wait before trying again.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating rate limiting is in effect.
                  retryAfter:
                    type: integer
                    description: Number of seconds to wait before making another verification attempt.
      operationId: verifyOtp
  /sign-payload:
    post:
      summary: Sign Message
      description: >
        Allows for the signing of arbitrary payloads using the authenticated user's signer. The payload to be signed should be included within the body of a stamped request, ensuring the integrity and authenticity of the message to be signed. This operation is important for executing transactions and interactions on the blockchain that require verified signatures from the user's wallet.
      security:
        - apiKey: []
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stampedRequest:
                  $ref: "#/components/schemas/SignedTurnkeyRequest"
                  description: |
                    A stamped request that includes the payload to be signed. The payload is part of the stamped request's body, which should conform to the structure outlined in the Turnkey API documentation for signing raw payloads.

                    Because users are given wallets for both Ethereum and Solana, it's possible to request signatures for both chains. The following is an example of the payload structure for signing bytes on Ethereum and Solana:

                    Signing bytes for Ethereum:
                    ```
                    {
                      organizationId: this.user.orgId,
                      type: "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2",
                      timestampMs: Date.now().toString(),
                      parameters: {
                        encoding: "PAYLOAD_ENCODING_HEXADECIMAL",
                        hashFunction: "HASH_FUNCTION_NO_OP",
                        payload: msg,
                        signWith: this.user.address,
                      },
                    }
                    ```

                    Signing bytes for Solana:
                    ```
                    {
                      organizationId: this.user.orgId,
                      type: "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2",
                      timestampMs: Date.now().toString(),
                      parameters: {
                        encoding: "PAYLOAD_ENCODING_HEXADECIMAL",
                        hashFunction: "HASH_FUNCTION_NOT_APPLICABLE",
                        payload: msg,
                        signWith: this.user.solanaAddress,
                      },
                    }
                    ```

                    For more details on the parameters of the request body, see [Turnkey's API Reference](https://docs.turnkey.com/api#tag/Signing/operation/SignRawPayload).
              required:
                - stampedRequest
      responses:
        "200":
          description: Message signing successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  signature:
                    type: string
                    description: The signature generated for the specified payload.
                required:
                  - signature
      operationId: signMessage

components:
  securitySchemes:
    apiKey:
      type: apiKey
      name: Authorization
      in: header
      description: An API key that will be supplied in a named header.
      x-default: "Bearer API_KEY"
  schemas:
    email:
      type: string
      description: The email of the user that is signing in.
    expirationSeconds:
      type: string
      description: >
        Specifies the duration of the login session in seconds. After this period, the user has to re-login to refresh their session. The default value is 900 seconds (15 minutes).
    targetPublicKey:
      type: string
      description: |
        Authentication of a client is done via an HPKE flow that allows the client and TEE to exchange an encrypted bundle without revealing it to a middleman (you, us, or Turnkey). The targetPublicKey is the public key that the client uses to decrypt the shared secret.

        See more in the [Turnkey Docs](https://docs.turnkey.com/embedded-wallets/sub-organization-auth).
    orgId:
      type: string
      description: The organization ID associated with the user and application, enabling the management of Smart Wallets.
    SignedTurnkeyRequestStamp:
      type: object
      description: >
        A JSON-encoded object containing stamping information.
      properties:
        stampHeaderName:
          type: string
          description: >
            For WebAuthN based stamps, this should be `X-Stamp-Webauthn`. For all other stamps, this should be `X-Stamp`.
        stampHeaderValue:
          type: string
          description: >
            The stamp over the request body. See the [Turnkey Stamps Documentation](https://docs.turnkey.com/api-design/stamps) for information on the format of this value.
      required:
        - stampHeaderName
        - stampHeaderValue
    SignedTurnkeyRequest:
      type: object
      description: >
        The signed request object containing session information. It is used to ensure the integrity and authenticity of requests to our API. For detailed steps on how to create a stamped request refer to the [Turnkey Stamps Documentation](https://docs.turnkey.com/api-design/stamps).
      properties:
        url:
          type: string
          description: Generated by the turnkey client, but will be ignored on our end.
        body:
          type: string
          description: JSON stringified request body.
        stamp:
          $ref: "#/components/schemas/SignedTurnkeyRequestStamp"
      required:
        - body
        - stamp
    otpId:
      type: string
      description: OTP request identifier
    redirectParams:
      type: string
      description: Redirect parameters appended to the magic link.
    credentialBundle:
      type: string
      description: An encrypted API key credential bundle that can be used for subsequent authenticated requests. This bundle contains the authentication credentials encrypted with the provided targetPublicKey and can be decrypted client-side for stamping requests.
