name: "Publish Fern Documentation"
description: "Generates and publishes Fern documentation with deployment tracking"

inputs:
  github-token:
    description: "GitHub token for creating deployments"
    required: true
  fern-token:
    description: "Fern API token for publishing docs"
    required: true
  environment:
    description: "Deployment environment name (e.g. docs-preview, docs-production)"
    required: true
  ref:
    description: "Git ref to create deployment for"
    required: true
  preview:
    description: "Whether to generate preview or production docs"
    required: false
    default: "false"

outputs:
  url:
    description: "The URL where the Ferns site was published"
    value: ${{ steps.generate-docs.outputs.url }}

runs:
  using: "composite"
  steps:
    - name: Install Fern
      shell: bash
      run: npm install -g fern-api

    - name: Start deployment
      uses: actions/github-script@v7
      id: start-deploy
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: '${{ inputs.ref }}',
            environment: '${{ inputs.environment }}',
            auto_merge: false,
            required_contexts: [],
            description: 'Starting Fern documentation deployment'
          });

          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'in_progress',
            description: 'Deployment in progress'
          });

          core.setOutput('deployment_id', deployment.data.id);

    - name: Generate documentation
      id: generate-docs
      shell: bash
      env:
        FERN_TOKEN: ${{ inputs.fern-token }}
      run: |
        cd docs-site
        if [[ "${{ inputs.preview }}" == "true" ]]; then
          OUTPUT=$(fern generate --docs --preview 2>&1) || true
        else
          OUTPUT=$(fern generate --docs --log-level debug 2>&1) || true
        fi
        echo "$OUTPUT"
        URL=$(echo "$OUTPUT" | grep -oP 'Published docs to \K.*(?= \()')
        echo "url=$URL" >> $GITHUB_OUTPUT

    - name: Update deployment status
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
          const envUrl = '${{ steps.generate-docs.outputs.url }}';
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{ steps.start-deploy.outputs.deployment_id }},
            state: status,
            environment_url: envUrl,
            description: `Deployment ${status === 'success' ? 'completed successfully' : 'failed'}`
          });
